generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [btree_gin, pg_trgm, uuid_ossp(map: "uuid-ossp")]
}

model Person {
  id                      String                   @id @default(cuid())
  slug                    String                   @unique
  name                    String
  bio                     String?
  imageUrl                String?
  profession              ProfessionType           @default(OTHER)
  professionDetail        String?
  nationality             NationalityType          @default(OTHER)
  nationalityDetail       String?
  birthDate               DateTime?
  deathDate               DateTime?
  akaNames                String[]
  background              String?
  racialGroup             String?
  religion                String?
  bestKnownFor            String?
  birthPlace              String?
  politicalBeliefs        String?
  politicalParty          String?
  residence               String?
  roleDescription         String?
  yearsActive             String?
  deathPlace              String?
  religionDenomination    String?
  verificationLevel       VerificationLevel        @default(UNVERIFIED)
  verifiedAt              DateTime?
  verifiedBy              String?
  statementCount          Int                      @default(0)
  caseCount               Int                      @default(0)
  lastActiveDate          DateTime?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  fullName                String?
  firstName               String?
  middleName              String?
  lastName                String?
  namePrefix              String?
  nameSuffix              String?
  aliases                 String[]
  hebrewName              String?
  arabicName              String?
  nativeName              String?
  dateOfBirth             DateTime?
  age                     Int?
  gender                  Gender?
  nationalityArray        Nationality[]
  primaryNationality      Nationality?
  ethnicity               String[]
  professionArray         Profession[]
  primaryProfession       Profession?
  professionDetails       String?
  industry                Industry?
  specialization          String?
  yearsExperience         Int?
  educationLevel          EducationLevel?
  degrees                 String[]
  universities            String[]
  academicTitles          String[]
  currentTitle            String?
  currentOrganization     String?
  currentOrgId            String?
  employmentStatus        EmploymentStatus?
  isRetired               Boolean?                 @default(false)
  retirementDate          DateTime?
  shortBio                String?                  @db.VarChar(500)
  publicFigure            Boolean?                 @default(false)
  celebrityStatus         CelebrityStatus?
  notableFor              String[]
  awards                  String[]
  publications            String[]
  influenceScore          Float?
  influenceLevel          PersonInfluenceLevel?
  hasTwitter              Boolean?                 @default(false)
  twitterHandle           String?
  twitterFollowers        Int?
  twitterVerified         Boolean?                 @default(false)
  hasLinkedIn             Boolean?                 @default(false)
  linkedInUrl             String?
  linkedInConnections     Int?
  hasFacebook             Boolean?                 @default(false)
  facebookUrl             String?
  facebookFollowers       Int?
  hasInstagram            Boolean?                 @default(false)
  instagramHandle         String?
  instagramFollowers      Int?
  totalSocialReach        Int?
  mediaAppearances        Int?                     @default(0)
  citationCount           Int?                     @default(0)
  politicalAffiliation    PoliticalAffiliation?
  politicalLeaning        PoliticalLeaning?
  knownPositions          String[]
  advocacy                String[]
  isPolitician            Boolean?                 @default(false)
  isActivist              Boolean?                 @default(false)
  isLobbyist              Boolean?                 @default(false)
  boardPositions          Int?                     @default(0)
  hasControversies        Boolean?                 @default(false)
  controversyScore        Float?
  controversyNotes        String?
  reputationStatus        ReputationStatus?
  reputationNotes         String?
  hasBeenCancelled        Boolean?                 @default(false)
  cancelledDate           DateTime?
  cancelledReason         String?
  hasBeenSuspended        Boolean?                 @default(false)
  hasBeenFired            Boolean?                 @default(false)
  hasResigned             Boolean?                 @default(false)
  hasLegalIssues          Boolean?                 @default(false)
  legalIssueNotes         String?
  underInvestigation      Boolean?                 @default(false)
  investigationType       String?
  hasSanctions            Boolean?                 @default(false)
  sanctionDetails         String?
  hasCriminalRecord       Boolean?                 @default(false)
  criminalNotes           String?
  responseCount           Int?                     @default(0)
  sourceCount             Int?                     @default(0)
  criticismsMade          Int?                     @default(0)
  criticismsReceived      Int?                     @default(0)
  supportGiven            Int?                     @default(0)
  supportReceived         Int?                     @default(0)
  firstActivityDate       DateTime?
  lastActivityDate        DateTime?
  mostActiveYear          Int?
  isVerified              Boolean?                 @default(false)
  personVerificationLevel PersonVerificationLevel? @default(UNVERIFIED)
  verificationDate        DateTime?
  verificationNotes       String?
  wikipediaUrl            String?
  officialWebsite         String?
  linkedInVerified        Boolean?                 @default(false)
  residenceCountry        String?
  residenceState          String?
  residenceCity           String?
  workCountry             String?
  workCity                String?
  publicEmail             String?
  agentEmail              String?
  pressContact            String?
  isActive                Boolean?                 @default(true)
  isDeceased              Boolean?                 @default(false)
  deceasedDate            DateTime?
  deathCause              String?
  lastDeathCheck          DateTime?
  isBlocked               Boolean?                 @default(false)
  isPEP                   Boolean?                 @default(false)
  isHighProfile           Boolean?                 @default(false)
  publicNotes             String?
  internalNotes           String?
  researchNotes           String?
  editorialNotes          String?
  createdBy               String?
  lastEditedBy            String?
  dataSource              String?
  importSource            String?
  lastReviewDate          DateTime?
  needsReview             Boolean?                 @default(false)
  affiliations            Affiliation[]
  journalistProfile       Journalist?
  repercussions           Repercussion[]           @relation("PersonRepercussions")
  statements              Statement[]              @relation("PersonStatements")
  StatementAuthor         StatementAuthor[]
  groupStatements         Statement[]              @relation("PersonGroupStatements")
  cases                   Case[]                   @relation("PersonCases")

  @@index([slug])
  @@index([verificationLevel])
  @@index([profession])
  @@index([nationality])
}

model Organization {
  id                                                String            @id @default(cuid())
  slug                                              String            @unique
  name                                              String
  type                                              OrganizationType
  description                                       String?
  website                                           String?
  legalName                                         String?
  registrationNumber                                String?
  taxId                                             String?
  isPersonalBrand                                   Boolean           @default(false)
  parentOrganizationId                              String?
  founded                                           DateTime?
  dissolved                                         DateTime?
  headquarters                                      String?
  operatingCountries                                String[]
  verificationLevel                                 VerificationLevel @default(UNVERIFIED)
  verifiedAt                                        DateTime?
  employeeCount                                     Int?
  annualRevenue                                     Float?
  statementCount                                    Int               @default(0)
  caseCount                                         Int               @default(0)
  createdAt                                         DateTime          @default(now())
  updatedAt                                         DateTime          @updatedAt
  orgType                                           OrgType?          @default(OTHER)
  orgTypeOther                                      String?
  legalStructure                                    LegalStructure?
  taxStatus                                         TaxStatus?
  incorporationDate                                 DateTime?
  incorporationState                                String?
  incorporationCountry                              String?
  personId                                          String?
  ultimateParentId                                  String?
  ownershipPercentage                               Float?
  headquartersCity                                  String?
  affiliations                                      Affiliation[]
  mediaOutlet                                       MediaOutlet?
  parentOrganization                                Organization?     @relation("OrganizationHierarchy", fields: [parentOrganizationId], references: [id])
  subsidiaries                                      Organization[]    @relation("OrganizationHierarchy")
  repercussions                                     Repercussion[]    @relation("OrganizationRepercussions")
  Statement_Statement_onBehalfOfOrgIdToOrganization Statement[]       @relation("Statement_onBehalfOfOrgIdToOrganization")
  statements                                        Statement[]       @relation("OrganizationStatements")
  StatementAuthor                                   StatementAuthor[]
  groupStatements                                   Statement[]       @relation("OrganizationGroupStatements")
  cases                                             Case[]            @relation("OrganizationCases")

  @@index([slug])
  @@index([type])
  @@index([verificationLevel])
}

model MediaOutlet {
  id                String            @id @default(cuid())
  organizationId    String            @unique
  circulationSize   Int?
  primaryLanguage   String            @default("en")
  languages         String[]
  mediaType         String[]
  politicalBias     MediaBias         @default(UNKNOWN)
  credibility       CredibilityRating @default(UNKNOWN)
  factCheckRating   String?
  ownershipType     String?
  majorShareholders String[]
  fundingSources    String[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  journalists       Journalist[]
  organization      Organization      @relation(fields: [organizationId], references: [id])
  sources           Source[]

  @@index([politicalBias])
  @@index([credibility])
}

model Journalist {
  id               String       @id @default(cuid())
  personId         String       @unique
  currentOutletId  String?
  beat             String[]
  isFreelance      Boolean      @default(false)
  verificationType String?
  twitterHandle    String?
  linkedinProfile  String?
  personalWebsite  String?
  articlesCount    Int          @default(0)
  averageBias      Float?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  currentOutlet    MediaOutlet? @relation(fields: [currentOutletId], references: [id])
  person           Person       @relation(fields: [personId], references: [id])
  sources          Source[]

  @@index([currentOutletId])
}

model Topic {
  id                    String          @id @default(cuid())
  slug                  String          @unique
  name                  String
  displayLabel          String?
  description           String
  searchKeywords        String[]
  priority              Int             @default(0)
  isActive              Boolean         @default(true)
  isFeatured            Boolean         @default(false)
  startDate             DateTime?
  endDate               DateTime?
  location              String?
  incidentCount         Int             @default(0)
  participantCount      Int             @default(0)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  topicType             TopicType?      @default(OTHER)
  scope                 TopicScale?     @default(NATIONAL)
  status                TopicStatus?    @default(ACTIVE)
  aliases               String[]
  parentTopicId         String?
  relatedTopics         String[]
  timelineStart         DateTime?       @db.Timestamptz(6)
  timelineEnd           DateTime?       @db.Timestamptz(6)
  peakDate              DateTime?       @db.Timestamptz(6)
  resolution            String?
  ongoingDevelopments   String?
  statementCount        Int             @default(0)
  sourceCount           Int             @default(0)
  lastActivityAt        DateTime?       @db.Timestamptz(6)
  trendingScore         Float           @default(0)
  controversyScore      Float           @default(0)
  publicInterestScore   Float           @default(0)
  mediaAttentionScore   Float           @default(0)
  politicalImpactScore  Float           @default(0)
  keyFigures            String[]
  affectedOrganizations String[]
  geographicScope       String[]
  relatedPolicies       String[]
  legislationLinks      String[]
  mediaReferences       Json?
  externalLinks         Json?
  searchTerms           String[]
  hashtagsTracked       String[]
  metaData              Json?
  parentTopic           Topic?          @relation("TopicHierarchy", fields: [parentTopicId], references: [id])
  childTopics           Topic[]         @relation("TopicHierarchy")
  cases                 TopicCase[]
  relationsFrom         TopicRelation[] @relation("TopicRelationFrom")
  relationsTo           TopicRelation[] @relation("TopicRelationTo")
  tags                  Tag[]           @relation("TopicTags")

  @@index([slug])
  @@index([topicType])
  @@index([status])
  @@index([scope])
  @@index([isActive])
  @@index([isFeatured])
  @@index([priority])
  @@index([parentTopicId])
  @@index([lastActivityAt])
  @@index([trendingScore])
  @@index([startDate])
  @@index([name])
  @@index([affectedOrganizations], type: Gin)
  @@index([geographicScope], type: Gin)
  @@index([hashtagsTracked], type: Gin)
  @@index([isActive, priority])
  @@index([keyFigures], type: Gin)
  @@index([mediaReferences], type: Gin)
  @@index([metaData], type: Gin)
  @@index([searchKeywords], type: Gin)
  @@index([searchTerms], type: Gin)
  @@index([status, lastActivityAt])
  @@index([topicType, isActive])
}

model Case {
  id              String            @id @default(cuid())
  slug            String            @unique
  title           String
  summary         String
  description     String
  caseDate        DateTime
  publicationDate DateTime          @default(now())
  status          CaseStatus        @default(DOCUMENTED)
  severity        CaseSeverity?
  severityScore   Int?
  locationCity    String?
  locationState   String?
  locationCountry String?
  locationDetail  String?
  mediaFraming    String?
  triggeringEvent String?
  outcome         String?
  isVerified      Boolean           @default(false)
  verifiedBy      String?
  verifiedAt      DateTime?
  viewCount       Int               @default(0)
  shareCount      Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  repercussions   Repercussion[]
  sources         Source[]
  statements      Statement[]
  topics          TopicCase[]
  tags            Tag[]             @relation("CaseTags")
  organizations   Organization[]    @relation("OrganizationCases")
  persons         Person[]          @relation("PersonCases")

  @@index([caseDate])
  @@index([status])
  @@index([severity])
  @@index([slug])
  @@map("Incident")
}

model Statement {
  id                                                   String             @id @default(cuid())
  content                                              String
  context                                              String?
  statementType                                        StatementType      @default(ORIGINAL)
  responseType                                         ResponseType?
  statementDate                                        DateTime
  mediumUrl                                            String?
  isVerified                                           Boolean            @default(false)
  verifiedBy                                           String?
  verifiedAt                                           DateTime?
  lostEmployment                                       Boolean            @default(false)
  lostContracts                                        Boolean            @default(false)
  paintedNegatively                                    Boolean            @default(false)
  repercussionDetails                                  String?
  responseImpact                                       String?
  personId                                             String?
  organizationId                                       String?
  respondsToId                                         String?
  caseId                                               String?
  createdAt                                            DateTime           @default(now())
  updatedAt                                            DateTime           @updatedAt
  verificationLevel                                    VerificationLevel? @default(UNVERIFIED)
  medium                                               Medium?
  summary                                              String?            @db.VarChar(500)
  statementTime                                        String?
  responseDepth                                        Int?               @default(0)
  isGroupStatement                                     Boolean?           @default(false)
  onBehalfOfOrgId                                      String?
  speakerRole                                          String?
  responseTime                                         Int?
  platform                                             String?
  socialMediaUrl                                       String?
  socialMediaId                                        String?
  isDeleted                                            Boolean?           @default(false)
  deletedDate                                          DateTime?
  venue                                                String?
  event                                                String?
  becameIncidentDate                                   DateTime?
  incidentTrigger                                      String?
  verificationDate                                     DateTime?
  isDisputed                                           Boolean?           @default(false)
  disputeNotes                                         String?
  responseCount                                        Int?               @default(0)
  criticismCount                                       Int?               @default(0)
  supportCount                                         Int?               @default(0)
  mediaOutlets                                         Int?               @default(0)
  articleCount                                         Int?               @default(0)
  likes                                                Int?
  shares                                               Int?
  views                                                Int?
  hasRepercussions                                     Boolean?           @default(false)
  primarySourceId                                      String?
  contentWarning                                       String?
  isRetracted                                          Boolean?           @default(false)
  retractionDate                                       DateTime?
  retractionText                                       String?
  migratedFromResponse                                 Boolean?           @default(false)
  originalResponseId                                   String?
  createdBy                                            String?
  lastEditedBy                                         String?
  repercussionsAbout                                   Repercussion[]     @relation("ResponseStatement")
  repercussionsCaused                                  Repercussion[]     @relation("TriggeringStatement")
  sources                                              Source[]
  case                                                 Case?              @relation(fields: [caseId], references: [id], onDelete: Restrict)
  Organization_Statement_onBehalfOfOrgIdToOrganization Organization?      @relation("Statement_onBehalfOfOrgIdToOrganization", fields: [onBehalfOfOrgId], references: [id], onUpdate: NoAction, map: "Statement_onBehalfOfOrg_fkey")
  organization                                         Organization?      @relation("OrganizationStatements", fields: [organizationId], references: [id])
  person                                               Person?            @relation("PersonStatements", fields: [personId], references: [id])
  primarySource                                        Source?            @relation("PrimaryStatementSource", fields: [primarySourceId], references: [id], onUpdate: NoAction, map: "Statement_primarySource_fkey")
  respondsTo                                           Statement?         @relation("StatementResponses", fields: [respondsToId], references: [id])
  responses                                            Statement[]        @relation("StatementResponses")
  StatementAuthor                                      StatementAuthor[]
  groupOrganizations                                   Organization[]     @relation("OrganizationGroupStatements")
  groupAuthors                                         Person[]           @relation("PersonGroupStatements")

  @@unique([personId, caseId, content])
  @@index([statementType])
  @@index([personId])
  @@index([organizationId])
  @@index([caseId])
  @@index([respondsToId])
  @@index([hasRepercussions])
  @@index([isVerified])
  @@index([responseType])
  @@index([statementDate])
  @@index([statementType, organizationId])
  @@index([statementType, personId])
}

model Repercussion {
  id                    String           @id @default(cuid())
  type                  RepercussionType
  description           String
  isTactical            Boolean          @default(false)
  coordinationEvidence  String?
  startDate             DateTime
  endDate               DateTime?
  duration              Int?
  severityScore         Int
  impactDescription     String?
  affectedPersonId      String?
  affectedOrgId         String?
  initiatingOrgs        String[]
  initiatingPersons     String[]
  triggeringStatementId String?
  responseStatementId   String?
  caseId                String
  mediaOutlets          String[]
  coverageIntensity     String?
  outcome               String?
  isOngoing             Boolean          @default(false)
  wasSuccessful         Boolean?
  isVerified            Boolean          @default(false)
  verifiedBy            String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  affectedOrganization  Organization?    @relation("OrganizationRepercussions", fields: [affectedOrgId], references: [id])
  affectedPerson        Person?          @relation("PersonRepercussions", fields: [affectedPersonId], references: [id])
  case                  Case             @relation(fields: [caseId], references: [id])
  responseStatement     Statement?       @relation("ResponseStatement", fields: [responseStatementId], references: [id])
  triggeringStatement   Statement?       @relation("TriggeringStatement", fields: [triggeringStatementId], references: [id])
  sources               Source[]

  @@index([type])
  @@index([isTactical])
  @@index([affectedPersonId])
  @@index([affectedOrgId])
  @@index([caseId])
}

model Source {
  id                   String               @id @default(cuid())
  title                String
  url                  String?
  publication          String?
  publicationSlug      String?
  mediaOutletId        String?
  author               String?
  journalistId         String?
  publishDate          DateTime?
  accessDate           DateTime             @default(now())
  lastVerified         DateTime?
  credibility          CredibilityRating    @default(UNKNOWN)
  isArchived           Boolean              @default(false)
  archiveUrl           String?
  qualityScore         Int?
  hasByline            Boolean              @default(false)
  hasMultipleSources   Boolean              @default(false)
  caseId               String?
  statementId          String?
  repercussionId       String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  publicationSection   String?
  additionalAuthors    String[]
  lastVerifiedDate     DateTime?            @db.Timestamptz(6)
  sourceType           SourceType?          @default(NEWS_ARTICLE)
  sourceLevel          SourceLevel?         @default(SECONDARY)
  contentType          ContentType?         @default(TEXT)
  credibilityScore     Float?
  credibilityLevel     CredibilityRating?   @default(UNKNOWN)
  verificationStatus   VerificationStatus?  @default(UNVERIFIED)
  verificationDate     DateTime?            @db.Timestamptz(6)
  verifiedBy           String?
  verificationNotes    String?
  factCheckStatus      FactCheckStatus?
  factCheckUrl         String?
  factCheckBy          String?
  archiveDate          DateTime?            @db.Timestamptz(6)
  archiveMethod        ArchiveMethod?
  archiveHash          String?
  requiresArchival     Boolean?             @default(true)
  archivalPriority     Int?                 @default(5)
  contentSnapshot      String?
  screenshotUrl        String?
  pdfUrl               String?
  hasPaywall           Boolean?             @default(false)
  isOpinion            Boolean?             @default(false)
  isEditorial          Boolean?             @default(false)
  isExclusive          Boolean?             @default(false)
  hasDate              Boolean?             @default(false)
  hasSources           Boolean?             @default(false)
  wordCount            Int?
  biasRating           BiasRating?
  biasNote             String?
  isDeleted            Boolean?             @default(false)
  deletionDate         DateTime?            @db.Timestamptz(6)
  deletionReason       String?
  isBroken             Boolean?             @default(false)
  lastCheckDate        DateTime?            @db.Timestamptz(6)
  checkFailCount       Int?                 @default(0)
  contentWarning       String?
  isGraphic            Boolean?             @default(false)
  isSensitive          Boolean?             @default(false)
  citationCount        Int?                 @default(0)
  viewCount            Int?                 @default(0)
  publicNotes          String?
  internalNotes        String?
  topicId              String?
  createdBy            String?
  lastEditedBy         String?
  AffiliationSources   AffiliationSources[]
  case                 Case?                @relation(fields: [caseId], references: [id])
  journalist           Journalist?          @relation(fields: [journalistId], references: [id])
  mediaOutlet          MediaOutlet?         @relation(fields: [mediaOutletId], references: [id])
  repercussion         Repercussion?        @relation(fields: [repercussionId], references: [id])
  statement            Statement?           @relation(fields: [statementId], references: [id])
  primaryForStatements Statement[]          @relation("PrimaryStatementSource")

  @@index([mediaOutletId])
  @@index([credibility])
  @@index([journalistId])
  @@index([caseId])
  @@index([statementId])
  @@index([isArchived], map: "idx_source_archived")
  @@index([credibilityLevel], map: "idx_source_credibility")
  @@index([publishDate], map: "idx_source_publish_date")
  @@index([sourceType, sourceLevel], map: "idx_source_type")
  @@index([verificationStatus], map: "idx_source_verification")
}

model Affiliation {
  id                  String               @id @default(cuid())
  role                String
  roleLevel           RoleLevel            @default(MID)
  department          String?
  startDate           DateTime?
  endDate             DateTime?
  isActive            Boolean              @default(true)
  description         String?
  responsibilities    String[]
  appearanceType      String?
  frequency           String?
  isPaid              Boolean?
  compensationType    String?
  personId            String
  organizationId      String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  roleCategory        RoleCategory?
  officialTitle       String?
  shortTitle          String?
  previousRole        String?
  isCurrent           Boolean?             @default(true)
  tenureMonths        Int?
  appointmentType     AppointmentType?
  termLimit           String?
  affiliationType     AffiliationType?
  isPrimary           Boolean?             @default(false)
  isPublic            Boolean?             @default(true)
  isVerified          Boolean?             @default(false)
  employmentStatus    EmploymentStatus?
  isVolunteer         Boolean?             @default(false)
  departureReason     DepartureReason?
  departureNote       String?
  wasTerminated       Boolean?             @default(false)
  wasResignation      Boolean?             @default(false)
  departureCaseId     String?
  hasHiringAuthority  Boolean?             @default(false)
  hasBudgetAuthority  Boolean?             @default(false)
  hasPublicProfile    Boolean?             @default(false)
  hasMediaRole        Boolean?             @default(false)
  influenceLevel      Int?
  authorityScope      String?
  mediaAppearances    Int?                 @default(0)
  speakingEngagements Int?                 @default(0)
  publicStatements    Int?                 @default(0)
  isSpokesperson      Boolean?             @default(false)
  mediaRestrictions   String?
  verificationDate    DateTime?            @db.Timestamptz(6)
  verifiedBy          String?
  verificationSource  String?
  evidenceUrl         String?
  internalNotes       String?
  publicNotes         String?
  isControversial     Boolean?             @default(false)
  controversyNote     String?
  createdBy           String?
  lastEditedBy        String?
  organization        Organization         @relation(fields: [organizationId], references: [id])
  person              Person               @relation(fields: [personId], references: [id])
  AffiliationSources  AffiliationSources[]

  @@unique([personId, organizationId, role])
  @@index([isActive])
  @@index([organizationId])
  @@index([personId])
  @@index([startDate, endDate], map: "idx_affiliation_dates")
  @@index([departureReason], map: "idx_affiliation_departure")
  @@index([organizationId, isActive], map: "idx_affiliation_org_active")
  @@index([personId, isCurrent], map: "idx_affiliation_person_current")
  @@index([roleCategory, roleLevel], map: "idx_affiliation_role")
  @@index([isVerified], map: "idx_affiliation_verified")
}

model Tag {
  id                 String      @id @default(cuid())
  name               String      @unique
  slug               String      @unique
  category           TagCategory @default(OTHER)
  parentTagId        String?
  description        String?
  color              String?
  icon               String?
  isControversial    Boolean     @default(false)
  controversyScore   Int?
  usageCount         Int         @default(0)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  subcategory        String?
  usageGuidelines    String?
  backgroundColor    String?
  controversyNote    String?
  disputedBy         String[]
  preferredBy        String[]
  neutralAlternative String?
  status             TagStatus?  @default(PENDING)
  createdBy          String?
  approvedBy         String?
  approvedDate       DateTime?   @db.Timestamptz(6)
  rejectionReason    String?
  requiresApproval   Boolean?    @default(false)
  restrictedTo       String[]
  caseCount          Int?        @default(0)
  statementCount     Int?        @default(0)
  personCount        Int?        @default(0)
  orgCount           Int?        @default(0)
  lastUsedAt         DateTime?   @db.Timestamptz(6)
  deprecatedAt       DateTime?   @db.Timestamptz(6)
  parentTag          Tag?        @relation("TagHierarchy", fields: [parentTagId], references: [id])
  childTags          Tag[]       @relation("TagHierarchy")
  aliases            TagAlias[]
  cases              Case[]      @relation("CaseTags")
  topics             Topic[]     @relation("TopicTags")

  @@index([slug])
  @@index([usageCount])
  @@index([category])
  @@index([isControversial], map: "idx_tag_controversial")
  @@index([category, status], map: "idx_tag_status")
  @@index([usageCount], map: "idx_tag_usage")
}

model TopicCase {
  topicId        String
  caseId         String
  relevanceScore Int?
  isPrimary      Boolean             @default(false)
  createdAt      DateTime            @default(now())
  relationType   TopicCaseRelation?  @default(RELATED)
  notes          String?
  addedBy        String?
  isVerified     Boolean?            @default(false)
  updatedAt      DateTime            @default(now()) @updatedAt @db.Timestamptz(6)
  case           Case                @relation(fields: [caseId], references: [id])
  topic          Topic               @relation(fields: [topicId], references: [id])

  @@id([topicId, caseId])
  @@index([topicId])
  @@index([caseId])
  @@index([relationType])
  @@map("TopicIncident")
}

model TopicRelation {
  id           String            @id @default(dbgenerated("(gen_random_uuid())::text"))
  fromTopicId  String
  toTopicId    String
  relationType TopicRelationType
  description  String?
  strength     Int?              @default(5)
  isVerified   Boolean?          @default(false)
  createdAt    DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime          @default(now()) @updatedAt @db.Timestamptz(6)
  fromTopic    Topic             @relation("TopicRelationFrom", fields: [fromTopicId], references: [id], onDelete: Cascade)
  toTopic      Topic             @relation("TopicRelationTo", fields: [toTopicId], references: [id], onDelete: Cascade)

  @@unique([fromTopicId, toTopicId, relationType])
  @@index([fromTopicId])
  @@index([toTopicId])
  @@index([relationType])
}

model Event {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  slug        String    @unique
  description String?
  startDate   DateTime? @db.Timestamptz(6)
  endDate     DateTime? @db.Timestamptz(6)
  createdAt   DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime? @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([slug], map: "idx_event_slug")
}

model TagAlias {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  tagId     String
  alias     String    @unique
  aliasType AliasType
  language  String?   @default("en")
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  tag       Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([alias], map: "idx_tagalias_alias")
  @@index([tagId], map: "idx_tagalias_tag")
}

model AffiliationSources {
  affiliationId String
  sourceId      String
  Affiliation   Affiliation @relation(fields: [affiliationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Source        Source      @relation(fields: [sourceId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([affiliationId, sourceId])
}

model StatementAuthor {
  id             String        @id @default(dbgenerated("(gen_random_uuid())::text"))
  statementId    String
  personId       String?
  organizationId String?
  role           String?
  orderIndex     Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  Organization   Organization? @relation(fields: [organizationId], references: [id], onUpdate: NoAction)
  Person         Person?       @relation(fields: [personId], references: [id], onUpdate: NoAction)
  Statement      Statement     @relation(fields: [statementId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([statementId, organizationId])
  @@unique([statementId, personId])
  @@index([organizationId])
  @@index([personId])
  @@index([statementId])
}

enum ProfessionType {
  POLITICIAN
  JOURNALIST
  ACADEMIC
  ACTIVIST
  BUSINESS
  CELEBRITY
  RELIGIOUS
  MILITARY
  LEGAL
  MEDICAL
  ARTIST
  ATHLETE
  OTHER
}

enum NationalityType {
  US
  UK
  ISRAEL
  PALESTINE
  FRANCE
  GERMANY
  CANADA
  AUSTRALIA
  OTHER
}

enum VerificationLevel {
  UNVERIFIED
  BASIC
  VERIFIED
  TRUSTED
  FULLY_VERIFIED
  PARTIALLY_VERIFIED
  DISPUTED
  LIKELY_FALSE
  DEBUNKED
}

enum OrganizationType {
  MEDIA_OUTLET
  POLITICAL_PARTY
  NGO
  CORPORATION
  UNIVERSITY
  THINK_TANK
  GOVERNMENT_AGENCY
  RELIGIOUS_ORGANIZATION
  ADVOCACY_GROUP
  OTHER
}

enum StatementType {
  ORIGINAL
  RESPONSE
  CLARIFICATION
  RETRACTION
  APOLOGY
}

enum ResponseType {
  CRITICISM
  SUPPORT
  MIXED_RESPONSE
  CLARIFICATION_CHALLENGE
  DISCIPLINARY_ACTION
  PROFESSIONAL_CONSEQUENCE
  APOLOGY_RESPONSE
  INSTITUTIONAL_RESPONSE
  OTHER
}

enum RoleLevel {
  INTERN
  JUNIOR
  MID
  SENIOR
  EXECUTIVE
  BOARD
  HONORARY
}

enum CaseStatus {
  DOCUMENTED
  VERIFIED
  DISPUTED
  RETRACTED
  ONGOING
  ALLEGED
  DEVELOPING
  UPDATED
  CORRECTED
  RESOLVED

  @@map("IncidentStatus")
}

enum IncidentType {
  STATEMENT_CONTROVERSY
  RESPONSE_BACKLASH
  EMPLOYMENT_ACTION
  LEGAL_ACTION
  PROTEST_ACTION
  PLATFORM_ACTION
  VIOLENCE_INCIDENT
  HARASSMENT_CAMPAIGN
  MEDIA_CONTROVERSY
  ACADEMIC_CONTROVERSY
  POLITICAL_CONTROVERSY
  SOCIAL_MEDIA_STORM
  BOYCOTT_CAMPAIGN
  INVESTIGATION
  POLICY_CHANGE
  OTHER
}

enum IncidentCategory {
  ANTISEMITISM_ALLEGATION
  ISLAMOPHOBIA_ALLEGATION
  RACISM_ALLEGATION
  FREE_SPEECH
  ACADEMIC_FREEDOM
  CENSORSHIP
  CANCEL_CULTURE
  HATE_SPEECH
  DISCRIMINATION
  RETALIATION
  DEFAMATION
  MISREPRESENTATION
  FACT_DISPUTE
  POLITICAL_PRESSURE
  INSTITUTIONAL_RESPONSE
}

enum CaseSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  MINIMAL

  @@map("IncidentSeverity")
}

enum ImpactScope {
  INDIVIDUAL
  LOCAL
  INSTITUTIONAL
  NATIONAL
  INTERNATIONAL
  GLOBAL
}

enum LocationType {
  ONLINE
  UNIVERSITY
  WORKPLACE
  GOVERNMENT_BUILDING
  PUBLIC_SPACE
  MEDIA_OUTLET
  CONFERENCE
  PRIVATE_VENUE
  MULTIPLE
}

enum TriggerType {
  STATEMENT
  SOCIAL_MEDIA_POST
  ARTICLE
  SPEECH
  PROTEST
  POLICY
  INVESTIGATION
  MEDIA_COVERAGE
  RESPONSE_TO_INCIDENT
  CUMULATIVE
}

enum ResolutionStatus {
  ONGOING
  PARTIALLY_RESOLVED
  RESOLVED
  ESCALATED
  ABANDONED
  LEGAL_PENDING
  UNDER_REVIEW
}

enum RepercussionSeverity {
  MINIMAL
  MINOR
  MODERATE
  SIGNIFICANT
  SEVERE
  EXTREME
}

enum RepercussionType {
  TERMINATION
  SUSPENSION
  RESIGNATION
  DEMOTION
  CONTRACT_CANCELLATION
  BLACKLISTING
  LAWSUIT
  ARREST
  INVESTIGATION
  CHARGES_FILED
  COORDINATED_DEFAMATION
  NARRATIVE_REFRAMING
  CHARACTER_ASSASSINATION
  MANUFACTURED_SCANDAL
  PUBLIC_APOLOGY
  BOYCOTT
  HARASSMENT_CAMPAIGN
  DEATH_THREATS
  LOSS_OF_PLATFORM
  ACADEMIC_CENSURE
  LICENSE_REVOCATION
  PROFESSIONAL_SHUNNING
  FUNDING_WITHDRAWAL
  SPONSOR_LOSS
  FINE
  DAMAGES_AWARDED
  PARTNERSHIP_ENDED
  BOOKING_CANCELLED
  DEMONETIZATION
  MEMBERSHIP_REVOKED
  CENSURE
  CONDEMNATION
  ACADEMIC_DISINVITATION
  DEGREE_REVOKED
}

enum MediaBias {
  FAR_LEFT
  LEFT
  CENTER_LEFT
  CENTER
  CENTER_RIGHT
  RIGHT
  FAR_RIGHT
  UNKNOWN
}

enum CredibilityRating {
  VERY_LOW
  LOW
  MIXED
  HIGH
  VERY_HIGH
  UNKNOWN
}

enum TagCategory {
  THEME
  LOCATION
  ORGANIZATION
  EVENT
  CONTROVERSY
  POLICY
  OTHER
}

enum TopicType {
  ANTISEMITISM_INCIDENT
  ISRAEL_PALESTINE_CONFLICT
  GAZA_OPERATIONS
  WEST_BANK_SETTLEMENTS
  ZIONISM_DEBATE
  JEWISH_COMMUNITY
  PALESTINIAN_RIGHTS
  BDS_MOVEMENT
  HOLOCAUST_MEMORY
  IHRA_DEFINITION
  UK_POLITICS
  US_POLITICS
  INTERNATIONAL_RELATIONS
  UNIVERSITY_CAMPUS
  MEDIA_COVERAGE
  SOCIAL_MEDIA
  CANCEL_CULTURE
  DEPLATFORMING
  LAWFARE
  SMEAR_CAMPAIGN
  OTHER
}

enum TopicScale {
  LOCAL
  REGIONAL
  NATIONAL
  INTERNATIONAL
  GLOBAL
}

enum TopicStatus {
  EMERGING
  ACTIVE
  DEVELOPING
  ESCALATING
  PEAK
  DECLINING
  RESOLVED
  DORMANT
  RECURRING
}

enum TopicRelationType {
  SUBSET_OF
  CAUSED_BY
  LED_TO
  RELATED_TO
  CONTRADICTS
  SUPPORTS
  PART_OF_SERIES
}

enum TopicCaseRelation {
  PRIMARY
  RELATED
  BACKGROUND
  CONSEQUENCE
  EXAMPLE

  @@map("TopicIncidentRelation")
}

enum RoleCategory {
  EXECUTIVE_LEADERSHIP
  BOARD_MEMBER
  EDITORIAL_LEADERSHIP
  EDITORIAL_STAFF
  MEDIA_PERSONALITY
  ELECTED_OFFICIAL
  APPOINTED_OFFICIAL
  POLITICAL_STAFF
  ACADEMIC_LEADERSHIP
  ACADEMIC_FACULTY
  RESEARCH
  LEGAL_LEADERSHIP
  LEGAL_PRACTITIONER
  NGO_LEADERSHIP
  NGO_STAFF
  CONSULTANT
  EMPLOYEE
  CONTRACTOR
  MEMBER
  VOLUNTEER
  HONORARY
}

enum AffiliationType {
  EMPLOYMENT
  BOARD_POSITION
  MEMBERSHIP
  FELLOWSHIP
  CONSULTANCY
  ADVISORY
  HONORARY
  VOLUNTEER
  INTERNSHIP
  POLITICAL_APPOINTMENT
  ELECTED_POSITION
}

enum EmploymentStatus {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  PER_DIEM
  SEASONAL
  TEMPORARY
}

enum AppointmentType {
  ELECTED
  APPOINTED
  HIRED
  VOLUNTEER_SELECTED
  NOMINATED
  HEREDITARY
}

enum DepartureReason {
  RESIGNED
  RETIRED
  CAREER_CHANGE
  PERSONAL_REASONS
  TERMINATED
  FIRED_FOR_CAUSE
  LAID_OFF
  POSITION_ELIMINATED
  CONTRACT_ENDED
  FORCED_RESIGNATION
  SCANDAL
  INVESTIGATION
  POLITICAL_PRESSURE
  PUBLIC_PRESSURE
  DECEASED
  UNKNOWN
  NOT_SPECIFIED
}

enum SourceType {
  NEWS_ARTICLE
  OPINION_PIECE
  EDITORIAL
  PRESS_RELEASE
  GOVERNMENT_DOCUMENT
  ACADEMIC_PAPER
  SOCIAL_MEDIA_POST
  VIDEO
  AUDIO
  TRANSCRIPT
  LEGAL_DOCUMENT
  REPORT
  BOOK
  WEBSITE
  INTERVIEW
  SPEECH
  LEAKED_DOCUMENT
  OTHER
}

enum SourceLevel {
  PRIMARY
  SECONDARY
  TERTIARY
  ANALYSIS
}

enum ContentType {
  TEXT
  VIDEO
  AUDIO
  IMAGE
  DOCUMENT
  INTERACTIVE
  DATA
}

enum VerificationStatus {
  VERIFIED
  PARTIALLY_VERIFIED
  UNVERIFIED
  DISPUTED
  DEBUNKED
}

enum FactCheckStatus {
  TRUE
  MOSTLY_TRUE
  MIXED
  MOSTLY_FALSE
  FALSE
  UNPROVEN
  PENDING
}

enum ArchiveMethod {
  WAYBACK_MACHINE
  ARCHIVE_TODAY
  LOCAL_STORAGE
  SCREENSHOT
  PDF_CAPTURE
  FULL_CAPTURE
}

enum BiasRating {
  EXTREME_LEFT
  LEFT
  LEFT_CENTER
  CENTER
  RIGHT_CENTER
  RIGHT
  EXTREME_RIGHT
  CONSPIRACY_PSEUDOSCIENCE
  PRO_SCIENCE
  SATIRE
}

enum OutletType {
  NEWSPAPER
  TELEVISION
  RADIO
  ONLINE_ONLY
  MAGAZINE
  WIRE_SERVICE
  BLOG
  PODCAST
  SOCIAL_MEDIA
  GOVERNMENT
  ACADEMIC
  NGO
  THINK_TANK
}

enum TagStatus {
  PENDING
  APPROVED
  REJECTED
  DEPRECATED
  ARCHIVED
}

enum AliasType {
  SYNONYM
  ABBREVIATION
  TRANSLATION
  HISTORICAL
  COLLOQUIAL
  MISSPELLING
}

enum OrgType {
  ADVOCACY_GROUP
  THINK_TANK
  NGO
  CHARITY
  FOUNDATION
  RESEARCH_INSTITUTE
  POLICY_CENTER
  WATCHDOG
  NEWS_OUTLET
  SOCIAL_MEDIA_PLATFORM
  PUBLISHING_HOUSE
  PRODUCTION_COMPANY
  BROADCASTER
  ONLINE_MEDIA
  ALTERNATIVE_MEDIA
  POLITICAL_PARTY
  PAC
  SUPER_PAC
  CAMPAIGN
  LOBBY_GROUP
  POLITICAL_ACTION_GROUP
  GRASSROOTS_MOVEMENT
  COALITION
  GOVERNMENT_AGENCY
  LEGISLATIVE_BODY
  JUDICIAL_BODY
  EXECUTIVE_OFFICE
  MILITARY_UNIT
  INTELLIGENCE_AGENCY
  DIPLOMATIC_MISSION
  INTERNATIONAL_BODY
  TREATY_ORGANIZATION
  UNIVERSITY
  COLLEGE
  SCHOOL
  RESEARCH_CENTER
  ACADEMIC_DEPARTMENT
  RELIGIOUS_INSTITUTION
  PLACE_OF_WORSHIP
  RELIGIOUS_ORGANIZATION
  FAITH_BASED_CHARITY
  RELIGIOUS_SCHOOL
  DENOMINATIONAL_BODY
  CORPORATION
  COMPANY
  STARTUP
  CONSULTANCY
  LAW_FIRM
  PR_FIRM
  TECH_COMPANY
  FINANCIAL_INSTITUTION
  UNION
  TRADE_ASSOCIATION
  PROFESSIONAL_SOCIETY
  CERTIFICATION_BODY
  STANDARDS_ORGANIZATION
  MUSEUM
  CULTURAL_CENTER
  ARTS_ORGANIZATION
  HERITAGE_GROUP
  COMMUNITY_CENTER
  INFORMAL_GROUP
  OTHER
}

enum LegalStructure {
  NONPROFIT_501C3
  NONPROFIT_501C4
  NONPROFIT_501C6
  NONPROFIT_OTHER
  CHARITABLE_TRUST
  RELIGIOUS_EXEMPT
  CORPORATION
  LLC
  PARTNERSHIP
  SOLE_PROPRIETORSHIP
  COOPERATIVE
  BENEFIT_CORP
  SOCIAL_ENTERPRISE
  GOVERNMENT_ENTITY
  QUASI_GOVERNMENTAL
  INTERNATIONAL_ORG
  INTERGOVERNMENTAL
  UNINCORPORATED
  INFORMAL
  UNKNOWN
}

enum TaxStatus {
  TAX_EXEMPT
  TAXABLE
  PARTIAL_EXEMPT
  PENDING
  REVOKED
  UNKNOWN
}

enum OperationalStatus {
  ACTIVE
  INACTIVE
  DISSOLVED
  SUSPENDED
  MERGED
  ACQUIRED
  BANKRUPTCY
  PENDING_FORMATION
  DORMANT
  UNKNOWN
}

enum FundingSource {
  GOVERNMENT_GRANTS
  GOVERNMENT_CONTRACTS
  FOREIGN_GOVERNMENT
  MULTILATERAL_FUNDING
  INDIVIDUAL_DONORS
  MAJOR_DONORS
  CORPORATE_SPONSORS
  FOUNDATIONS
  MEMBERSHIP_DUES
  VENTURE_CAPITAL
  PRIVATE_EQUITY
  CROWDFUNDING
  PROGRAM_REVENUE
  PRODUCT_SALES
  SERVICE_FEES
  INVESTMENTS
  ENDOWMENT
  MIXED_SOURCES
  UNKNOWN
}

enum TransparencyLevel {
  FULL_DISCLOSURE
  PARTIAL_DISCLOSURE
  MINIMAL_DISCLOSURE
  NO_DISCLOSURE
  LEGALLY_REQUIRED
  VOLUNTARY_TRANSPARENCY
  UNKNOWN
}

enum InfluenceLevel {
  GLOBAL
  INTERNATIONAL
  NATIONAL
  REGIONAL
  STATE_PROVINCIAL
  LOCAL
  COMMUNITY
  NICHE
  MINIMAL
  UNKNOWN
}

enum PoliticalLeaning {
  FAR_LEFT
  LEFT
  CENTER_LEFT
  CENTER
  CENTER_RIGHT
  RIGHT
  FAR_RIGHT
  LIBERTARIAN
  AUTHORITARIAN
  POPULIST
  PROGRESSIVE
  CONSERVATIVE
  SOCIALIST
  COMMUNIST
  FASCIST
  ANARCHIST
  MIXED
  APOLITICAL
  UNKNOWN
}

enum StanceOnIsrael {
  STRONGLY_SUPPORTIVE
  SUPPORTIVE
  CONDITIONALLY_SUPPORTIVE
  NEUTRAL
  CONDITIONALLY_CRITICAL
  CRITICAL
  STRONGLY_CRITICAL
  BDS_SUPPORTER
  MIXED_POSITIONS
  NO_POSITION
  UNKNOWN
}

enum OrganizationSize {
  MICRO
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
  MEGA
  UNKNOWN
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  OTHER
  UNKNOWN
}

enum Nationality {
  USA
  UK
  CANADA
  AUSTRALIA
  ISRAEL
  PALESTINE
  FRANCE
  GERMANY
  RUSSIA
  CHINA
  INDIA
  BRAZIL
  MEXICO
  JAPAN
  SOUTH_KOREA
  SAUDI_ARABIA
  IRAN
  EGYPT
  TURKEY
  SOUTH_AFRICA
  NIGERIA
  OTHER
  UNKNOWN
}

enum Profession {
  POLITICIAN
  DIPLOMAT
  GOVERNMENT_OFFICIAL
  POLITICAL_ADVISOR
  JOURNALIST
  EDITOR
  NEWS_ANCHOR
  COLUMNIST
  COMMENTATOR
  BLOGGER
  PODCASTER
  PROFESSOR
  RESEARCHER
  ACADEMIC_ADMINISTRATOR
  STUDENT
  LAWYER
  JUDGE
  PROSECUTOR
  LEGAL_SCHOLAR
  CEO
  EXECUTIVE
  ENTREPRENEUR
  INVESTOR
  CONSULTANT
  ACTOR
  DIRECTOR
  PRODUCER
  WRITER
  MUSICIAN
  ARTIST
  COMEDIAN
  ACTIVIST
  ORGANIZER
  NGO_LEADER
  ADVOCATE
  CLERGY
  RABBI
  IMAM
  PRIEST
  RELIGIOUS_LEADER
  MILITARY_OFFICER
  INTELLIGENCE_OFFICIAL
  POLICE_OFFICER
  DOCTOR
  NURSE
  RESEARCHER_MEDICAL
  ENGINEER
  DEVELOPER
  TECH_EXECUTIVE
  ATHLETE
  COACH
  SPORTS_EXECUTIVE
  INFLUENCER
  PUBLIC_FIGURE
  OTHER
  UNKNOWN
}

enum Industry {
  POLITICS_GOVERNMENT
  MEDIA_JOURNALISM
  EDUCATION_ACADEMIA
  LAW_LEGAL
  BUSINESS_FINANCE
  TECHNOLOGY
  HEALTHCARE
  ENTERTAINMENT
  SPORTS
  NONPROFIT_NGO
  RELIGION
  MILITARY_DEFENSE
  OTHER
}

enum EducationLevel {
  HIGH_SCHOOL
  SOME_COLLEGE
  BACHELORS
  MASTERS
  DOCTORATE
  PROFESSIONAL
  OTHER
}

enum CelebrityStatus {
  A_LIST
  B_LIST
  NOTABLE
  NICHE_FAMOUS
  INTERNET_FAMOUS
  LOCAL_CELEBRITY
}

enum PersonInfluenceLevel {
  GLOBAL
  INTERNATIONAL
  NATIONAL
  REGIONAL
  LOCAL
  NICHE
}

enum PoliticalAffiliation {
  DEMOCRAT
  REPUBLICAN
  INDEPENDENT_US
  GREEN_US
  LIBERTARIAN_US
  CONSERVATIVE_UK
  LABOUR_UK
  LIBERAL_DEMOCRAT_UK
  GREEN_UK
  LIKUD
  LABOR_IL
  BLUE_WHITE
  RELIGIOUS_ZIONIST
  CONSERVATIVE
  LIBERAL
  SOCIALIST
  COMMUNIST
  NATIONALIST
  NONPARTISAN
  UNKNOWN
  OTHER
}

enum ReputationStatus {
  EXCELLENT
  GOOD
  MIXED
  DAMAGED
  SEVERELY_DAMAGED
  REHABILITATING
}

enum PersonVerificationLevel {
  FULLY_VERIFIED
  VERIFIED
  PARTIALLY_VERIFIED
  UNVERIFIED
  DISPUTED
}

enum Medium {
  TELEVISION_INTERVIEW
  RADIO_INTERVIEW
  NEWSPAPER_INTERVIEW
  PRESS_CONFERENCE
  PRESS_RELEASE
  PODCAST
  VIDEO_PLATFORM
  LIVESTREAM
  BLOG_POST
  ONLINE_ARTICLE
  TWITTER_X
  FACEBOOK
  INSTAGRAM
  TIKTOK
  LINKEDIN
  TELEGRAM
  THREADS
  TRUTH_SOCIAL
  PARLIAMENTARY_SESSION
  CONGRESSIONAL_HEARING
  UN_ASSEMBLY
  COURT_STATEMENT
  ACADEMIC_LECTURE
  BOOK
  ACADEMIC_PAPER
  LETTER
  EMAIL
  LEAKED_DOCUMENT
  PUBLIC_SPEECH
  PANEL_DISCUSSION
  DEBATE
  RALLY
  PROTEST
  PRIVATE_LEAKED
  UNKNOWN
}
