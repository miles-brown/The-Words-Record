// JasPIZ Database Schema v3.0.1
// Complete PostgreSQL schema with all enhancements

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp"), pgTrgm(map: "pg_trgm"), btreeGin(map: "btree_gin")]
}

// ============ ENUMS ============

enum ProfessionType {
  POLITICIAN
  JOURNALIST
  ACADEMIC
  ACTIVIST
  BUSINESS
  CELEBRITY
  RELIGIOUS
  MILITARY
  LEGAL
  MEDICAL
  ARTIST
  ATHLETE
  OTHER
}

enum NationalityType {
  US
  UK
  ISRAEL
  PALESTINE
  FRANCE
  GERMANY
  CANADA
  AUSTRALIA
  OTHER
}

enum VerificationLevel {
  UNVERIFIED
  BASIC
  VERIFIED
  TRUSTED
}

enum OrganizationType {
  MEDIA_OUTLET
  POLITICAL_PARTY
  NGO
  CORPORATION
  UNIVERSITY
  THINK_TANK
  GOVERNMENT_AGENCY
  RELIGIOUS_ORGANIZATION
  ADVOCACY_GROUP
  OTHER
}

enum StatementType {
  ORIGINAL    // Original statement
  RESPONSE    // Response to another statement
  CLARIFICATION
  RETRACTION
  APOLOGY
}

enum ResponseType {
  CRITICISM
  SUPPORT
  MIXED_RESPONSE
  CLARIFICATION_CHALLENGE
  DISCIPLINARY_ACTION
  PROFESSIONAL_CONSEQUENCE
  APOLOGY_RESPONSE
  INSTITUTIONAL_RESPONSE
  OTHER
}

enum RoleLevel {
  INTERN
  JUNIOR
  MID
  SENIOR
  EXECUTIVE
  BOARD
  HONORARY
}

enum IncidentSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IncidentStatus {
  DOCUMENTED
  VERIFIED
  DISPUTED
  RETRACTED
  ONGOING
}

enum RepercussionType {
  // Direct Actions
  TERMINATION
  SUSPENSION
  RESIGNATION
  DEMOTION
  CONTRACT_CANCELLATION
  BLACKLISTING
  PARTNERSHIP_ENDED
  BOOKING_CANCELLED

  // Legal
  LAWSUIT
  ARREST
  INVESTIGATION
  CHARGES_FILED

  // Media Operations
  COORDINATED_DEFAMATION
  NARRATIVE_REFRAMING
  CHARACTER_ASSASSINATION
  MANUFACTURED_SCANDAL

  // Social
  PUBLIC_APOLOGY
  BOYCOTT
  HARASSMENT_CAMPAIGN
  DEATH_THREATS

  // Professional
  LOSS_OF_PLATFORM
  LICENSE_REVOCATION
  PROFESSIONAL_SHUNNING
  CENSURE
  CONDEMNATION
  MEMBERSHIP_REVOKED

  // Academic
  ACADEMIC_CENSURE
  ACADEMIC_DISINVITATION
  DEGREE_REVOKED

  // Financial
  FUNDING_WITHDRAWAL
  SPONSOR_LOSS
  FINE
  DAMAGES_AWARDED
  DEMONETIZATION
}

enum MediaBias {
  FAR_LEFT
  LEFT
  CENTER_LEFT
  CENTER
  CENTER_RIGHT
  RIGHT
  FAR_RIGHT
  UNKNOWN
}

enum CredibilityRating {
  VERY_LOW
  LOW
  MIXED
  HIGH
  VERY_HIGH
  UNKNOWN
}

enum TagCategory {
  THEME
  LOCATION
  ORGANIZATION
  EVENT
  CONTROVERSY
  POLICY
  OTHER
}

enum TopicType {
  // Core JasPIZ Topics
  ANTISEMITISM_INCIDENT
  ISRAEL_PALESTINE_CONFLICT
  GAZA_OPERATIONS
  WEST_BANK_SETTLEMENTS
  ZIONISM_DEBATE
  JEWISH_COMMUNITY
  PALESTINIAN_RIGHTS
  BDS_MOVEMENT
  HOLOCAUST_MEMORY
  IHRA_DEFINITION

  // Political & Institutional
  UK_POLITICS
  US_POLITICS
  INTERNATIONAL_RELATIONS
  UNIVERSITY_CAMPUS
  MEDIA_COVERAGE
  SOCIAL_MEDIA

  // Specific Controversies
  CANCEL_CULTURE
  DEPLATFORMING
  LAWFARE
  SMEAR_CAMPAIGN

  // Other
  OTHER
}

enum TopicScale {
  LOCAL
  REGIONAL
  NATIONAL
  INTERNATIONAL
  GLOBAL
}

enum TopicStatus {
  EMERGING
  ACTIVE
  DEVELOPING
  ESCALATING
  PEAK
  DECLINING
  RESOLVED
  DORMANT
  RECURRING
}

enum TopicRelationType {
  SUBSET_OF
  CAUSED_BY
  LED_TO
  RELATED_TO
  CONTRADICTS
  SUPPORTS
  PART_OF_SERIES
}

enum TopicIncidentRelation {
  PRIMARY
  RELATED
  BACKGROUND
  CONSEQUENCE
  EXAMPLE
}

// ============ MODELS ============

model Person {
  id                   String            @id @default(cuid())
  slug                 String            @unique
  name                 String
  bio                  String?
  imageUrl             String?

  // Structured fields
  profession           ProfessionType    @default(OTHER)
  professionDetail     String?          // Free text for specific role
  nationality          NationalityType   @default(OTHER)
  nationalityDetail    String?          // Free text for specific country

  // Dates
  birthDate            DateTime?
  deathDate            DateTime?

  // Additional info
  akaNames             String[]         // Array of alternative names
  background           String?
  racialGroup          String?
  religion             String?
  bestKnownFor         String?
  birthPlace           String?
  politicalBeliefs     String?
  politicalParty       String?
  residence            String?
  roleDescription      String?
  yearsActive          String?
  deathPlace           String?
  religionDenomination String?

  // Verification
  verificationLevel    VerificationLevel @default(UNVERIFIED)
  verifiedAt           DateTime?
  verifiedBy           String?

  // Cached statistics
  statementCount       Int              @default(0)
  incidentCount        Int              @default(0)
  lastActiveDate       DateTime?

  // Timestamps
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  // Relations
  affiliations         Affiliation[]
  statements           Statement[]      @relation("PersonStatements")
  groupStatements      Statement[]      @relation("PersonGroupStatements")
  incidents            Incident[]       @relation("PersonIncidents")
  repercussions        Repercussion[]   @relation("PersonRepercussions")
  journalistProfile    Journalist?

  @@index([slug])
  @@index([verificationLevel])
  @@index([profession])
  @@index([nationality])
}

model Organization {
  id                   String            @id @default(cuid())
  slug                 String            @unique
  name                 String
  type                 OrganizationType
  description          String?
  website              String?

  // Legal entity info
  legalName            String?
  registrationNumber   String?
  taxId                String?
  isPersonalBrand      Boolean          @default(false)

  // Structure
  parentOrganizationId String?
  parentOrganization   Organization?    @relation("OrganizationHierarchy", fields: [parentOrganizationId], references: [id])
  subsidiaries         Organization[]   @relation("OrganizationHierarchy")

  // Details
  founded              DateTime?
  dissolved            DateTime?
  headquarters         String?
  operatingCountries   String[]

  // Verification
  verificationLevel    VerificationLevel @default(UNVERIFIED)
  verifiedAt           DateTime?

  // Cached statistics
  employeeCount        Int?
  annualRevenue        Float?
  statementCount       Int              @default(0)
  incidentCount        Int              @default(0)

  // Timestamps
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  // Relations
  affiliations         Affiliation[]
  statements           Statement[]      @relation("OrganizationStatements")
  groupStatements      Statement[]      @relation("OrganizationGroupStatements")
  incidents            Incident[]       @relation("OrganizationIncidents")
  repercussions        Repercussion[]   @relation("OrganizationRepercussions")
  mediaOutlet          MediaOutlet?

  @@index([slug])
  @@index([type])
  @@index([verificationLevel])
}

model MediaOutlet {
  id               String         @id @default(cuid())
  organizationId   String         @unique
  organization     Organization   @relation(fields: [organizationId], references: [id])

  // Media-specific fields
  circulationSize  Int?
  primaryLanguage  String         @default("en")
  languages        String[]
  mediaType        String[]       // ["print", "digital", "broadcast", "podcast"]

  // Bias and credibility
  politicalBias    MediaBias      @default(UNKNOWN)
  credibility      CredibilityRating @default(UNKNOWN)
  factCheckRating  String?

  // Ownership
  ownershipType    String?        // "public", "private", "government", "non-profit"
  majorShareholders String[]
  fundingSources   String[]

  // Timestamps
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  journalists      Journalist[]
  sources          Source[]

  @@index([politicalBias])
  @@index([credibility])
}

model Journalist {
  id               String        @id @default(cuid())
  personId         String        @unique
  person           Person        @relation(fields: [personId], references: [id])

  // Current affiliation
  currentOutletId  String?
  currentOutlet    MediaOutlet?  @relation(fields: [currentOutletId], references: [id])

  // Journalist-specific
  beat             String[]      // Topics they cover
  isFreelance      Boolean       @default(false)
  verificationType String?       // "blue-check", "press-badge", etc.

  // Social media
  twitterHandle    String?
  linkedinProfile  String?
  personalWebsite  String?

  // Metrics
  articlesCount    Int           @default(0)
  averageBias      Float?

  // Timestamps
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  sources          Source[]

  @@index([currentOutletId])
}

model Topic {
  id                    String          @id @default(cuid())
  slug                  String          @unique
  name                  String
  displayLabel          String?
  description           String

  // Classification
  topicType             TopicType       @default(OTHER)
  status                TopicStatus     @default(ACTIVE)
  scope                 TopicScale      @default(NATIONAL)

  // Search and display
  searchKeywords        String[]
  aliases               String[]
  priority              Int             @default(0)
  isActive              Boolean         @default(true)
  isFeatured            Boolean         @default(false)

  // Hierarchy
  parentTopicId         String?
  parentTopic           Topic?          @relation("TopicHierarchy", fields: [parentTopicId], references: [id])
  childTopics           Topic[]         @relation("TopicHierarchy")
  relatedTopics         String[]        // Topic IDs

  // Timeline
  startDate             DateTime?
  endDate               DateTime?
  timelineStart         DateTime?
  timelineEnd           DateTime?
  peakDate              DateTime?

  // Location
  location              String?
  geographicScope       String[]

  // Content
  resolution            String?
  ongoingDevelopments   String?

  // Cached statistics
  incidentCount         Int             @default(0)
  participantCount      Int             @default(0)
  statementCount        Int             @default(0)
  sourceCount           Int             @default(0)
  lastActivityAt        DateTime?

  // Scores
  trendingScore         Float           @default(0)
  controversyScore      Float           @default(0)
  publicInterestScore   Float           @default(0)
  mediaAttentionScore   Float           @default(0)
  politicalImpactScore  Float           @default(0)

  // Related entities
  keyFigures            String[]        // Person IDs
  affectedOrganizations String[]        // Organization IDs
  relatedPolicies       String[]
  legislationLinks      String[]

  // Media and external
  mediaReferences       Json?
  externalLinks         Json?

  // Search optimization
  searchTerms           String[]
  hashtagsTracked       String[]

  // Metadata
  metaData              Json?

  // Timestamps
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  // Relations
  incidents             TopicIncident[]
  tags                  Tag[]           @relation("TopicTags")
  relationsFrom         TopicRelation[] @relation("TopicRelationFrom")
  relationsTo           TopicRelation[] @relation("TopicRelationTo")

  @@index([slug])
  @@index([topicType])
  @@index([status])
  @@index([scope])
  @@index([isActive])
  @@index([isFeatured])
  @@index([priority])
  @@index([parentTopicId])
  @@index([lastActivityAt])
  @@index([trendingScore])
  @@index([startDate])
  @@index([name])
}

model Incident {
  id              String           @id @default(cuid())
  slug            String           @unique
  title           String
  summary         String
  description     String

  // Dates
  incidentDate    DateTime
  publicationDate DateTime         @default(now())

  // Status and severity
  status          IncidentStatus   @default(DOCUMENTED)
  severity        IncidentSeverity?
  severityScore   Int?             // 1-100 scale

  // Location (structured)
  locationCity    String?
  locationState   String?
  locationCountry String?
  locationDetail  String?          // Free text for specifics

  // Context
  mediaFraming    String?
  triggeringEvent String?
  outcome         String?

  // Verification
  isVerified      Boolean          @default(false)
  verifiedBy      String?
  verifiedAt      DateTime?

  // Impact metrics
  viewCount       Int              @default(0)
  shareCount      Int              @default(0)

  // Timestamps
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  topics          TopicIncident[]
  statements      Statement[]
  sources         Source[]
  tags            Tag[]            @relation("IncidentTags")
  organizations   Organization[]   @relation("OrganizationIncidents")
  persons         Person[]         @relation("PersonIncidents")
  repercussions   Repercussion[]

  @@index([slug])
  @@index([status])
  @@index([severity])
  @@index([incidentDate])
}

model Statement {
  id                  String          @id @default(cuid())
  content             String
  context             String?

  // Type and categorization
  statementType       StatementType   @default(ORIGINAL)
  responseType        ResponseType?   // Only for RESPONSE type

  // Dates
  statementDate       DateTime

  // Medium and verification
  medium              String?         // "twitter", "interview", "speech", etc.
  mediumUrl           String?         // Link to original
  isVerified          Boolean         @default(false)
  verifiedBy          String?
  verifiedAt          DateTime?

  // Impact tracking (for original statements)
  lostEmployment      Boolean         @default(false)
  lostContracts       Boolean         @default(false)
  paintedNegatively   Boolean         @default(false)
  repercussionDetails String?

  // Response-specific (when statementType = RESPONSE)
  responseImpact      String?         // Impact of the response

  // Authors (can be person, org, or both for group statements)
  personId            String?
  person              Person?         @relation("PersonStatements", fields: [personId], references: [id])

  organizationId      String?
  organization        Organization?   @relation("OrganizationStatements", fields: [organizationId], references: [id])

  // Group authorship
  groupAuthors        Person[]        @relation("PersonGroupStatements")
  groupOrganizations  Organization[]  @relation("OrganizationGroupStatements")

  // What this responds to (if RESPONSE type)
  respondsToId        String?
  respondsTo          Statement?      @relation("StatementResponses", fields: [respondsToId], references: [id])
  responses           Statement[]     @relation("StatementResponses")

  // Incident connection
  incidentId          String
  incident            Incident        @relation(fields: [incidentId], references: [id])

  // Timestamps
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  // Relations
  sources             Source[]
  repercussionsCaused Repercussion[]  @relation("TriggeringStatement")
  repercussionsAbout  Repercussion[]  @relation("ResponseStatement")

  @@unique([personId, incidentId, content])
  @@index([statementType])
  @@index([personId])
  @@index([organizationId])
  @@index([incidentId])
  @@index([respondsToId])
}

model Repercussion {
  id                    String            @id @default(cuid())

  // Type and classification
  type                  RepercussionType
  description           String

  // Tactical analysis
  isTactical            Boolean           @default(false) // Planned/coordinated vs reactive
  coordinationEvidence  String?           // Evidence of coordination

  // Timing
  startDate             DateTime
  endDate               DateTime?
  duration              Int?              // Days

  // Severity and impact
  severityScore         Int               // 1-100
  impactDescription     String?

  // Affected parties
  affectedPersonId      String?
  affectedPerson        Person?           @relation("PersonRepercussions", fields: [affectedPersonId], references: [id])

  affectedOrgId         String?
  affectedOrganization  Organization?     @relation("OrganizationRepercussions", fields: [affectedOrgId], references: [id])

  // Initiating parties (for tactical operations)
  initiatingOrgs        String[]          // Organization IDs involved
  initiatingPersons     String[]          // Person IDs involved

  // What triggered this
  triggeringStatementId String?
  triggeringStatement   Statement?        @relation("TriggeringStatement", fields: [triggeringStatementId], references: [id])

  // Response statements about this repercussion
  responseStatementId   String?
  responseStatement     Statement?        @relation("ResponseStatement", fields: [responseStatementId], references: [id])

  // Incident connection
  incidentId            String
  incident              Incident          @relation(fields: [incidentId], references: [id])

  // Media coverage
  mediaOutlets          String[]          // MediaOutlet IDs that covered this
  coverageIntensity     String?           // "minimal", "moderate", "intense", "viral"

  // Outcome
  outcome               String?
  isOngoing             Boolean           @default(false)
  wasSuccessful         Boolean?          // Did it achieve intended goal?

  // Verification
  isVerified            Boolean           @default(false)
  verifiedBy            String?
  sources               Source[]

  // Timestamps
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@index([type])
  @@index([isTactical])
  @@index([affectedPersonId])
  @@index([affectedOrgId])
  @@index([incidentId])
}

model Source {
  id              String           @id @default(cuid())
  title           String
  url             String?

  // Publication info
  publication     String?
  publicationSlug String?
  mediaOutletId   String?
  mediaOutlet     MediaOutlet?     @relation(fields: [mediaOutletId], references: [id])

  // Author info
  author          String?
  journalistId    String?
  journalist      Journalist?      @relation(fields: [journalistId], references: [id])

  // Dates
  publishDate     DateTime?
  accessDate      DateTime         @default(now())
  lastVerified    DateTime?

  // Credibility and verification
  credibility     CredibilityRating @default(UNKNOWN)
  isArchived      Boolean          @default(false)
  archiveUrl      String?          // Wayback Machine, archive.is, etc.

  // Quality scoring
  qualityScore    Int?             // 1-100
  hasByline       Boolean          @default(false)
  hasMultipleSources Boolean       @default(false)

  // What it sources
  incidentId      String?
  incident        Incident?        @relation(fields: [incidentId], references: [id])

  statementId     String?
  statement       Statement?       @relation(fields: [statementId], references: [id])

  repercussionId  String?
  repercussion    Repercussion?    @relation(fields: [repercussionId], references: [id])

  // Timestamps
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([credibility])
  @@index([mediaOutletId])
  @@index([journalistId])
  @@index([incidentId])
  @@index([statementId])
}

model Affiliation {
  id               String         @id @default(cuid())

  // Role information
  role             String
  roleLevel        RoleLevel      @default(MID)
  department       String?

  // Dates
  startDate        DateTime?
  endDate          DateTime?
  isActive         Boolean        @default(true)

  // Details
  description      String?
  responsibilities String[]

  // For media appearances
  appearanceType   String?        // "regular", "contributor", "guest", "host"
  frequency        String?        // "daily", "weekly", "monthly", "occasional"

  // Compensation (optional, sensitive)
  isPaid           Boolean?
  compensationType String?        // "salary", "contract", "per-appearance"

  // Who and where
  personId         String
  person           Person         @relation(fields: [personId], references: [id])

  organizationId   String
  organization     Organization   @relation(fields: [organizationId], references: [id])

  // Timestamps
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([personId, organizationId, role])
  @@index([personId])
  @@index([organizationId])
  @@index([isActive])
}

model Tag {
  id               String        @id @default(cuid())
  name             String        @unique
  slug             String        @unique

  // Categorization
  category         TagCategory   @default(OTHER)
  parentTagId      String?
  parentTag        Tag?          @relation("TagHierarchy", fields: [parentTagId], references: [id])
  childTags        Tag[]         @relation("TagHierarchy")

  // Details
  description      String?
  color            String?       // For UI display
  icon             String?       // Icon identifier

  // Controversy tracking
  isControversial  Boolean       @default(false)
  controversyScore Int?          // 1-100

  // Usage stats
  usageCount       Int           @default(0)

  // Timestamps
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  incidents        Incident[]    @relation("IncidentTags")
  topics           Topic[]       @relation("TopicTags")

  @@index([slug])
  @@index([category])
  @@index([usageCount])
}

// ============ JUNCTION TABLES ============

model TopicIncident {
  topicId        String
  topic          Topic                  @relation(fields: [topicId], references: [id])

  incidentId     String
  incident       Incident               @relation(fields: [incidentId], references: [id])

  // Additional fields
  relationType   TopicIncidentRelation  @default(RELATED)
  relevanceScore Int?
  isPrimary      Boolean                @default(false)
  notes          String?
  addedBy        String?
  isVerified     Boolean                @default(false)

  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt

  @@id([topicId, incidentId])
  @@index([topicId])
  @@index([incidentId])
  @@index([relationType])
}

model TopicRelation {
  id             String             @id @default(cuid())

  fromTopicId    String
  fromTopic      Topic              @relation("TopicRelationFrom", fields: [fromTopicId], references: [id], onDelete: Cascade)

  toTopicId      String
  toTopic        Topic              @relation("TopicRelationTo", fields: [toTopicId], references: [id], onDelete: Cascade)

  relationType   TopicRelationType
  description    String?
  strength       Int                @default(5)  // 1-10 scale
  isVerified     Boolean            @default(false)

  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@unique([fromTopicId, toTopicId, relationType])
  @@index([fromTopicId])
  @@index([toTopicId])
  @@index([relationType])
}