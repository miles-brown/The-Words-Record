generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Person {
  id                   String        @id @default(cuid())
  slug                 String        @unique
  name                 String
  bio                  String?
  imageUrl             String?
  profession           String?
  nationality          String?
  birthDate            DateTime?
  deathDate            DateTime?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  akaNames             String?
  background           String?
  racialGroup          String?
  religion             String?
  bestKnownFor         String?
  birthPlace           String?
  politicalBeliefs     String?
  politicalParty       String?
  residence            String?
  roleDescription      String?
  yearsActive          String?
  deathPlace           String?
  religionDenomination String?
  affiliations         Affiliation[]
  responses            Response[]
  statements           Statement[]
  incidents            Incident[]    @relation("PersonIncidents")
}

model Organization {
  id           String        @id @default(cuid())
  slug         String        @unique
  name         String
  type         String
  description  String?
  website      String?
  founded      DateTime?
  headquarters String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  affiliations Affiliation[]
  responses    Response[]
  incidents    Incident[]    @relation("OrganizationIncidents")
}

model Incident {
  id              String         @id @default(cuid())
  slug            String         @unique
  title           String
  summary         String
  description     String
  incidentDate    DateTime
  publicationDate DateTime       @default(now())
  status          String         @default("documented")
  severity        String?
  location        String?
  mediaFraming    String?
  triggeringEvent String?
  outcome         String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  parentEventId   String?
  parentEvent     Event?         @relation("EventIncidents", fields: [parentEventId], references: [id])
  responses       Response[]
  sources         Source[]
  statements      Statement[]
  tags            Tag[]          @relation("IncidentTags")
  organizations   Organization[] @relation("OrganizationIncidents")
  persons         Person[]       @relation("PersonIncidents")
}

model Statement {
  id                  String     @id @default(cuid())
  content             String
  context             String?
  statementDate       DateTime
  medium              String?
  isVerified          Boolean    @default(false)
  lostEmployment      Boolean    @default(false)
  lostContracts       Boolean    @default(false)
  paintedNegatively   Boolean    @default(false)
  repercussionDetails String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  personId            String
  incidentId          String
  responses           Response[]
  sources             Source[]
  incident            Incident   @relation(fields: [incidentId], references: [id])
  person              Person     @relation(fields: [personId], references: [id])

  @@unique([personId, incidentId, content])
}

model Response {
  id             String        @id @default(cuid())
  content        String
  responseDate   DateTime
  type           String
  impact         String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  statementId    String?
  personId       String?
  organizationId String?
  incidentId     String
  incident       Incident      @relation(fields: [incidentId], references: [id])
  organization   Organization? @relation(fields: [organizationId], references: [id])
  person         Person?       @relation(fields: [personId], references: [id])
  statement      Statement?    @relation(fields: [statementId], references: [id])
}

model Source {
  id          String     @id @default(cuid())
  title       String
  url         String?
  publication String?
  author      String?
  publishDate DateTime?
  accessDate  DateTime   @default(now())
  credibility String?
  createdAt   DateTime   @default(now())
  incidentId  String?
  statementId String?
  statement   Statement? @relation(fields: [statementId], references: [id])
  incident    Incident?  @relation(fields: [incidentId], references: [id])
}

model Event {
  id          String     @id @default(cuid())
  slug        String     @unique
  title       String
  description String
  startDate   DateTime
  endDate     DateTime?
  scope       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  incidents   Incident[] @relation("EventIncidents")
}

model Affiliation {
  id             String       @id @default(cuid())
  role           String
  startDate      DateTime?
  endDate        DateTime?
  isActive       Boolean      @default(true)
  description    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  personId       String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  person         Person       @relation(fields: [personId], references: [id])

  @@unique([personId, organizationId, role])
}

model Tag {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  incidents   Incident[] @relation("IncidentTags")
}
