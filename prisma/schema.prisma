// JasPIZ Database Schema v3.0.1
// Complete PostgreSQL schema with all enhancements

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp"), pgTrgm(map: "pg_trgm"), btreeGin(map: "btree_gin")]
}

// ============ ENUMS ============

enum ProfessionType {
  POLITICIAN
  JOURNALIST
  ACADEMIC
  ACTIVIST
  BUSINESS
  CELEBRITY
  RELIGIOUS
  MILITARY
  LEGAL
  MEDICAL
  ARTIST
  ATHLETE
  OTHER
}

enum NationalityType {
  US
  UK
  ISRAEL
  PALESTINE
  FRANCE
  GERMANY
  CANADA
  AUSTRALIA
  OTHER
}

enum VerificationLevel {
  UNVERIFIED
  BASIC
  VERIFIED
  TRUSTED
}

enum OrganizationType {
  MEDIA_OUTLET
  POLITICAL_PARTY
  NGO
  CORPORATION
  UNIVERSITY
  THINK_TANK
  GOVERNMENT_AGENCY
  RELIGIOUS_ORGANIZATION
  ADVOCACY_GROUP
  OTHER
}

enum StatementType {
  ORIGINAL    // Original statement
  RESPONSE    // Response to another statement
  CLARIFICATION
  RETRACTION
  APOLOGY
}

enum ResponseType {
  CRITICISM
  SUPPORT
  MIXED_RESPONSE
  CLARIFICATION_CHALLENGE
  DISCIPLINARY_ACTION
  PROFESSIONAL_CONSEQUENCE
  APOLOGY_RESPONSE
  INSTITUTIONAL_RESPONSE
  OTHER
}

enum RoleLevel {
  INTERN
  JUNIOR
  MID
  SENIOR
  EXECUTIVE
  BOARD
  HONORARY
}

// Enhanced Incident Enums v3.0.1
enum IncidentStatus {
  ALLEGED           // Unconfirmed allegations
  DOCUMENTED        // Confirmed and documented
  VERIFIED          // Independently verified
  DISPUTED          // Facts in dispute
  DEVELOPING        // Still unfolding
  UPDATED           // New information added
  CORRECTED         // Corrections made
  RETRACTED         // Story retracted
  ONGOING           // Legacy support
  RESOLVED          // Legacy support
}

enum IncidentType {
  STATEMENT_CONTROVERSY   // Controversial statement made
  RESPONSE_BACKLASH      // Backlash to response
  EMPLOYMENT_ACTION      // Firing, suspension, etc.
  LEGAL_ACTION          // Lawsuits, charges
  PROTEST_ACTION        // Protests, demonstrations
  PLATFORM_ACTION       // Bans, deplatforming
  VIOLENCE_INCIDENT     // Physical violence
  HARASSMENT_CAMPAIGN   // Coordinated harassment
  MEDIA_CONTROVERSY     // Media coverage controversy
  ACADEMIC_CONTROVERSY  // Campus incidents
  POLITICAL_CONTROVERSY // Political incidents
  SOCIAL_MEDIA_STORM   // Social media pile-on
  BOYCOTT_CAMPAIGN     // Organized boycotts
  INVESTIGATION        // Formal investigations
  POLICY_CHANGE        // Policy changes
  OTHER
}

enum IncidentCategory {
  ANTISEMITISM_ALLEGATION
  ISLAMOPHOBIA_ALLEGATION
  RACISM_ALLEGATION
  FREE_SPEECH
  ACADEMIC_FREEDOM
  CENSORSHIP
  CANCEL_CULTURE
  HATE_SPEECH
  DISCRIMINATION
  RETALIATION
  DEFAMATION
  MISREPRESENTATION
  FACT_DISPUTE
  POLITICAL_PRESSURE
  INSTITUTIONAL_RESPONSE
}

enum IncidentSeverity {
  MINIMAL
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ImpactScope {
  INDIVIDUAL
  LOCAL
  INSTITUTIONAL
  NATIONAL
  INTERNATIONAL
  GLOBAL
}

enum LocationType {
  ONLINE
  UNIVERSITY
  WORKPLACE
  GOVERNMENT_BUILDING
  PUBLIC_SPACE
  MEDIA_OUTLET
  CONFERENCE
  PRIVATE_VENUE
  MULTIPLE
}

enum TriggerType {
  STATEMENT
  SOCIAL_MEDIA_POST
  ARTICLE
  SPEECH
  PROTEST
  POLICY
  INVESTIGATION
  MEDIA_COVERAGE
  RESPONSE_TO_INCIDENT
  CUMULATIVE
}

enum ResolutionStatus {
  ONGOING
  PARTIALLY_RESOLVED
  RESOLVED
  ESCALATED
  ABANDONED
  LEGAL_PENDING
  UNDER_REVIEW
}

enum RepercussionSeverity {
  MINIMAL
  MINOR
  MODERATE
  SIGNIFICANT
  SEVERE
  EXTREME
}

enum RepercussionType {
  // Direct Actions
  TERMINATION
  SUSPENSION
  RESIGNATION
  DEMOTION
  CONTRACT_CANCELLATION
  BLACKLISTING
  PARTNERSHIP_ENDED
  BOOKING_CANCELLED

  // Legal
  LAWSUIT
  ARREST
  INVESTIGATION
  CHARGES_FILED

  // Media Operations
  COORDINATED_DEFAMATION
  NARRATIVE_REFRAMING
  CHARACTER_ASSASSINATION
  MANUFACTURED_SCANDAL

  // Social
  PUBLIC_APOLOGY
  BOYCOTT
  HARASSMENT_CAMPAIGN
  DEATH_THREATS

  // Professional
  LOSS_OF_PLATFORM
  LICENSE_REVOCATION
  PROFESSIONAL_SHUNNING
  CENSURE
  CONDEMNATION
  MEMBERSHIP_REVOKED

  // Academic
  ACADEMIC_CENSURE
  ACADEMIC_DISINVITATION
  DEGREE_REVOKED

  // Financial
  FUNDING_WITHDRAWAL
  SPONSOR_LOSS
  FINE
  DAMAGES_AWARDED
  DEMONETIZATION
}

enum MediaBias {
  FAR_LEFT
  LEFT
  CENTER_LEFT
  CENTER
  CENTER_RIGHT
  RIGHT
  FAR_RIGHT
  UNKNOWN
}

enum CredibilityRating {
  VERY_LOW
  LOW
  MIXED
  HIGH
  VERY_HIGH
  UNKNOWN
}

enum TagCategory {
  THEME
  LOCATION
  ORGANIZATION
  EVENT
  CONTROVERSY
  POLICY
  OTHER
}

enum TopicType {
  // Core JasPIZ Topics
  ANTISEMITISM_INCIDENT
  ISRAEL_PALESTINE_CONFLICT
  GAZA_OPERATIONS
  WEST_BANK_SETTLEMENTS
  ZIONISM_DEBATE
  JEWISH_COMMUNITY
  PALESTINIAN_RIGHTS
  BDS_MOVEMENT
  HOLOCAUST_MEMORY
  IHRA_DEFINITION

  // Political & Institutional
  UK_POLITICS
  US_POLITICS
  INTERNATIONAL_RELATIONS
  UNIVERSITY_CAMPUS
  MEDIA_COVERAGE
  SOCIAL_MEDIA

  // Specific Controversies
  CANCEL_CULTURE
  DEPLATFORMING
  LAWFARE
  SMEAR_CAMPAIGN

  // Other
  OTHER
}

enum TopicScale {
  LOCAL
  REGIONAL
  NATIONAL
  INTERNATIONAL
  GLOBAL
}

enum TopicStatus {
  EMERGING
  ACTIVE
  DEVELOPING
  ESCALATING
  PEAK
  DECLINING
  RESOLVED
  DORMANT
  RECURRING
}

enum TopicRelationType {
  SUBSET_OF
  CAUSED_BY
  LED_TO
  RELATED_TO
  CONTRADICTS
  SUPPORTS
  PART_OF_SERIES
}

enum TopicIncidentRelation {
  PRIMARY
  RELATED
  BACKGROUND
  CONSEQUENCE
  EXAMPLE
}

// ============ ENHANCED v3.0.1 ENUMS ============

// Affiliation Enums
enum RoleCategory {
  EXECUTIVE_LEADERSHIP
  BOARD_MEMBER
  EDITORIAL_LEADERSHIP
  EDITORIAL_STAFF
  MEDIA_PERSONALITY
  ELECTED_OFFICIAL
  APPOINTED_OFFICIAL
  POLITICAL_STAFF
  ACADEMIC_LEADERSHIP
  ACADEMIC_FACULTY
  RESEARCH
  LEGAL_LEADERSHIP
  LEGAL_PRACTITIONER
  NGO_LEADERSHIP
  NGO_STAFF
  CONSULTANT
  EMPLOYEE
  CONTRACTOR
  MEMBER
  VOLUNTEER
  HONORARY
}

enum AffiliationType {
  EMPLOYMENT
  BOARD_POSITION
  MEMBERSHIP
  FELLOWSHIP
  CONSULTANCY
  ADVISORY
  HONORARY
  VOLUNTEER
  INTERNSHIP
  POLITICAL_APPOINTMENT
  ELECTED_POSITION
}

enum EmploymentStatus {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  PER_DIEM
  SEASONAL
  TEMPORARY
}

enum AppointmentType {
  ELECTED
  APPOINTED
  HIRED
  VOLUNTEER_SELECTED
  NOMINATED
  HEREDITARY
}

enum DepartureReason {
  RESIGNED
  RETIRED
  CAREER_CHANGE
  PERSONAL_REASONS
  TERMINATED
  FIRED_FOR_CAUSE
  LAID_OFF
  POSITION_ELIMINATED
  CONTRACT_ENDED
  FORCED_RESIGNATION
  SCANDAL
  INVESTIGATION
  POLITICAL_PRESSURE
  PUBLIC_PRESSURE
  DECEASED
  UNKNOWN
  NOT_SPECIFIED
}

// Source Enums
enum SourceType {
  NEWS_ARTICLE
  OPINION_PIECE
  EDITORIAL
  PRESS_RELEASE
  GOVERNMENT_DOCUMENT
  ACADEMIC_PAPER
  SOCIAL_MEDIA_POST
  VIDEO
  AUDIO
  TRANSCRIPT
  LEGAL_DOCUMENT
  REPORT
  BOOK
  WEBSITE
  INTERVIEW
  SPEECH
  LEAKED_DOCUMENT
  OTHER
}

enum SourceLevel {
  PRIMARY
  SECONDARY
  TERTIARY
  ANALYSIS
}

enum ContentType {
  TEXT
  VIDEO
  AUDIO
  IMAGE
  DOCUMENT
  INTERACTIVE
  DATA
}

enum VerificationStatus {
  VERIFIED
  PARTIALLY_VERIFIED
  UNVERIFIED
  DISPUTED
  DEBUNKED
}

enum FactCheckStatus {
  TRUE
  MOSTLY_TRUE
  MIXED
  MOSTLY_FALSE
  FALSE
  UNPROVEN
  PENDING
}

enum ArchiveMethod {
  WAYBACK_MACHINE
  ARCHIVE_TODAY
  LOCAL_STORAGE
  SCREENSHOT
  PDF_CAPTURE
  FULL_CAPTURE
}

enum BiasRating {
  EXTREME_LEFT
  LEFT
  LEFT_CENTER
  CENTER
  RIGHT_CENTER
  RIGHT
  EXTREME_RIGHT
  CONSPIRACY_PSEUDOSCIENCE
  PRO_SCIENCE
  SATIRE
}

enum OutletType {
  NEWSPAPER
  TELEVISION
  RADIO
  ONLINE_ONLY
  MAGAZINE
  WIRE_SERVICE
  BLOG
  PODCAST
  SOCIAL_MEDIA
  GOVERNMENT
  ACADEMIC
  NGO
  THINK_TANK
}

// Tag Enums
enum TagStatus {
  PENDING
  APPROVED
  REJECTED
  DEPRECATED
  ARCHIVED
}

enum AliasType {
  SYNONYM
  ABBREVIATION
  TRANSLATION
  HISTORICAL
  COLLOQUIAL
  MISSPELLING
}

// ============ MODELS ============

model Person {
  id                   String            @id @default(cuid())
  slug                 String            @unique
  name                 String
  bio                  String?
  imageUrl             String?

  // Structured fields
  profession           ProfessionType    @default(OTHER)
  professionDetail     String?          // Free text for specific role
  nationality          NationalityType   @default(OTHER)
  nationalityDetail    String?          // Free text for specific country

  // Dates
  birthDate            DateTime?
  deathDate            DateTime?

  // Additional info
  akaNames             String[]         // Array of alternative names
  background           String?
  racialGroup          String?
  religion             String?
  bestKnownFor         String?
  birthPlace           String?
  politicalBeliefs     String?
  politicalParty       String?
  residence            String?
  roleDescription      String?
  yearsActive          String?
  deathPlace           String?
  religionDenomination String?

  // Verification
  verificationLevel    VerificationLevel @default(UNVERIFIED)
  verifiedAt           DateTime?
  verifiedBy           String?

  // Cached statistics
  statementCount       Int              @default(0)
  incidentCount        Int              @default(0)
  lastActiveDate       DateTime?

  // Timestamps
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  // Relations
  affiliations         Affiliation[]
  statements           Statement[]      @relation("PersonStatements")
  groupStatements      Statement[]      @relation("PersonGroupStatements")
  incidents            Incident[]       @relation("PersonIncidents")
  repercussions        Repercussion[]   @relation("PersonRepercussions")
  journalistProfile    Journalist?
  tags                 Tag[]            @relation("PersonTags")

  @@index([slug])
  @@index([verificationLevel])
  @@index([profession])
  @@index([nationality])
}

model Organization {
  id                   String            @id @default(cuid())
  slug                 String            @unique
  name                 String
  type                 OrganizationType
  description          String?
  website              String?

  // Legal entity info
  legalName            String?
  registrationNumber   String?
  taxId                String?
  isPersonalBrand      Boolean          @default(false)

  // Structure
  parentOrganizationId String?
  parentOrganization   Organization?    @relation("OrganizationHierarchy", fields: [parentOrganizationId], references: [id])
  subsidiaries         Organization[]   @relation("OrganizationHierarchy")

  // Details
  founded              DateTime?
  dissolved            DateTime?
  headquarters         String?
  operatingCountries   String[]

  // Verification
  verificationLevel    VerificationLevel @default(UNVERIFIED)
  verifiedAt           DateTime?

  // Cached statistics
  employeeCount        Int?
  annualRevenue        Float?
  statementCount       Int              @default(0)
  incidentCount        Int              @default(0)

  // Timestamps
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  // Relations
  affiliations         Affiliation[]
  statements           Statement[]      @relation("OrganizationStatements")
  groupStatements      Statement[]      @relation("OrganizationGroupStatements")
  incidents            Incident[]       @relation("OrganizationIncidents")
  repercussions        Repercussion[]   @relation("OrganizationRepercussions")
  mediaOutlet          MediaOutlet?
  tags                 Tag[]            @relation("OrganizationTags")

  @@index([slug])
  @@index([type])
  @@index([verificationLevel])
}

model MediaOutlet {
  id               String         @id @default(cuid())
  organizationId   String         @unique
  organization     Organization   @relation(fields: [organizationId], references: [id])

  // Media-specific fields
  circulationSize  Int?
  primaryLanguage  String         @default("en")
  languages        String[]
  mediaType        String[]       // ["print", "digital", "broadcast", "podcast"]

  // Bias and credibility
  politicalBias    MediaBias      @default(UNKNOWN)
  credibility      CredibilityRating @default(UNKNOWN)
  factCheckRating  String?

  // Ownership
  ownershipType    String?        // "public", "private", "government", "non-profit"
  majorShareholders String[]
  fundingSources   String[]

  // Timestamps
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  journalists      Journalist[]
  sources          Source[]

  @@index([politicalBias])
  @@index([credibility])
}

model Journalist {
  id               String        @id @default(cuid())
  personId         String        @unique
  person           Person        @relation(fields: [personId], references: [id])

  // Current affiliation
  currentOutletId  String?
  currentOutlet    MediaOutlet?  @relation(fields: [currentOutletId], references: [id])

  // Journalist-specific
  beat             String[]      // Topics they cover
  isFreelance      Boolean       @default(false)
  verificationType String?       // "blue-check", "press-badge", etc.

  // Social media
  twitterHandle    String?
  linkedinProfile  String?
  personalWebsite  String?

  // Metrics
  articlesCount    Int           @default(0)
  averageBias      Float?

  // Timestamps
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  sources          Source[]

  @@index([currentOutletId])
}

model Topic {
  id                    String          @id @default(cuid())
  slug                  String          @unique
  name                  String
  displayLabel          String?
  description           String

  // Classification
  topicType             TopicType       @default(OTHER)
  status                TopicStatus     @default(ACTIVE)
  scope                 TopicScale      @default(NATIONAL)

  // Search and display
  searchKeywords        String[]
  aliases               String[]
  priority              Int             @default(0)
  isActive              Boolean         @default(true)
  isFeatured            Boolean         @default(false)

  // Hierarchy
  parentTopicId         String?
  parentTopic           Topic?          @relation("TopicHierarchy", fields: [parentTopicId], references: [id])
  childTopics           Topic[]         @relation("TopicHierarchy")
  relatedTopics         String[]        // Topic IDs

  // Timeline
  startDate             DateTime?
  endDate               DateTime?
  timelineStart         DateTime?
  timelineEnd           DateTime?
  peakDate              DateTime?

  // Location
  location              String?
  geographicScope       String[]

  // Content
  resolution            String?
  ongoingDevelopments   String?

  // Cached statistics
  incidentCount         Int             @default(0)
  participantCount      Int             @default(0)
  statementCount        Int             @default(0)
  sourceCount           Int             @default(0)
  lastActivityAt        DateTime?

  // Scores
  trendingScore         Float           @default(0)
  controversyScore      Float           @default(0)
  publicInterestScore   Float           @default(0)
  mediaAttentionScore   Float           @default(0)
  politicalImpactScore  Float           @default(0)

  // Related entities
  keyFigures            String[]        // Person IDs
  affectedOrganizations String[]        // Organization IDs
  relatedPolicies       String[]
  legislationLinks      String[]

  // Media and external
  mediaReferences       Json?
  externalLinks         Json?

  // Search optimization
  searchTerms           String[]
  hashtagsTracked       String[]

  // Metadata
  metaData              Json?

  // Timestamps
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  // Relations
  incidents             TopicIncident[]
  tags                  Tag[]           @relation("TopicTags")
  relationsFrom         TopicRelation[] @relation("TopicRelationFrom")
  relationsTo           TopicRelation[] @relation("TopicRelationTo")
  sources               Source[]        @relation("TopicSources")

  @@index([slug])
  @@index([topicType])
  @@index([status])
  @@index([scope])
  @@index([isActive])
  @@index([isFeatured])
  @@index([priority])
  @@index([parentTopicId])
  @@index([lastActivityAt])
  @@index([trendingScore])
  @@index([startDate])
  @@index([name])
}

model Incident {
  id              String           @id @default(cuid())
  slug            String           @unique

  // ═══════════════════════════════════════════
  // CORE CONTENT
  // ═══════════════════════════════════════════
  title           String
  subtitle        String?          // Secondary headline
  summary         String           @db.Text // 2-3 sentence summary
  description     String           @db.Text // Full description

  // Content language
  contentLanguage String           @default("en")
  translationAvailable Boolean     @default(false)

  // ═══════════════════════════════════════════
  // TEMPORAL DATA
  // ═══════════════════════════════════════════
  incidentDate    DateTime
  incidentEndDate DateTime?        // If multi-day incident
  publicationDate DateTime         @default(now())

  // Timing details
  timeOfDay       String?          // "morning", "afternoon", "evening"
  timezone        String?          // "America/New_York"
  duration        String?          // "3 hours", "2 days"

  // ═══════════════════════════════════════════
  // CLASSIFICATION & STATUS
  // ═══════════════════════════════════════════
  status          IncidentStatus   @default(DOCUMENTED)
  verificationLevel VerificationLevel @default(UNVERIFIED)

  incidentType    IncidentType?
  incidentCategory IncidentCategory?

  // ═══════════════════════════════════════════
  // SEVERITY & IMPACT
  // ═══════════════════════════════════════════
  severity        IncidentSeverity @default(MEDIUM)
  severityScore   Float?           // 0-100 calculated score

  // Impact metrics
  impactScope     ImpactScope?     @default(LOCAL)
  affectedCount   Int?             // Number of people affected

  // Specific impacts
  hasEmploymentImpact Boolean      @default(false)
  hasLegalImpact  Boolean          @default(false)
  hasReputationalImpact Boolean    @default(false)
  hasPlatformImpact Boolean        @default(false)
  hasFinancialImpact Boolean       @default(false)

  // ═══════════════════════════════════════════
  // LOCATION (Structured)
  // ═══════════════════════════════════════════
  locationName    String?          // "UN General Assembly"
  locationType    LocationType?
  locationCountry String?
  locationState   String?
  locationCity    String?
  locationDetail  String?          // Legacy field
  locationAddress String?
  locationCoordinates String?      // "40.7489,-73.9680"

  isOnline        Boolean          @default(false)
  isInPerson      Boolean          @default(true)

  // ═══════════════════════════════════════════
  // TOPICS & THEMES
  // ═══════════════════════════════════════════
  primaryTopicId  String?          // Main topic if applicable

  // Legacy Event relationship (for migration)
  parentEventId   String?
  parentEvent     Event?           @relation(fields: [parentEventId], references: [id])

  // ═══════════════════════════════════════════
  // TRIGGER & CONTEXT
  // ═══════════════════════════════════════════
  triggerType     TriggerType?
  triggeringEvent String?          @db.Text

  // What sparked this incident
  triggeringStatementId String?     @unique
  triggeringStatement Statement?   @relation("IncidentTriggeringStatement", fields: [triggeringStatementId], references: [id])

  // Context and framing
  mediaFraming    String?          @db.Text
  contextualBackground String?     @db.Text

  // ═══════════════════════════════════════════
  // OUTCOME & RESOLUTION
  // ═══════════════════════════════════════════
  outcome         String?          @db.Text
  outcomeDate     DateTime?
  resolutionStatus ResolutionStatus @default(ONGOING)

  // ═══════════════════════════════════════════
  // REPERCUSSIONS
  // ═══════════════════════════════════════════
  hasRepercussions Boolean         @default(false)
  repercussionCount Int            @default(0)

  // Repercussion summary
  primaryRepercussionType RepercussionType?
  repercussionSeverity RepercussionSeverity?

  // ═══════════════════════════════════════════
  // PARTICIPANTS & RELATIONSHIPS
  // ═══════════════════════════════════════════
  // People involved
  primaryPersonId String?          // Main person if applicable

  // Organizations involved
  primaryOrgId    String?          // Main organization if applicable

  // Statements related to this incident
  statementCount  Int              @default(0)

  // Responses (from merged Response model)
  responseCount   Int              @default(0)
  supportCount    Int              @default(0)
  criticismCount  Int              @default(0)

  // ═══════════════════════════════════════════
  // SOURCES & DOCUMENTATION
  // ═══════════════════════════════════════════
  primarySourceId String?
  sourceCount     Int              @default(0)

  hasVideo        Boolean          @default(false)
  hasAudio        Boolean          @default(false)
  hasDocuments    Boolean          @default(false)

  // ═══════════════════════════════════════════
  // MEDIA COVERAGE
  // ═══════════════════════════════════════════
  mediaOutletCount Int             @default(0)
  articleCount    Int              @default(0)

  wasFrontPage    Boolean          @default(false)
  wasInternationalNews Boolean     @default(false)

  // Coverage timeline
  firstReportedDate DateTime?
  peakCoverageDate DateTime?
  coverageDuration String?         // "3 days", "2 weeks"

  // ═══════════════════════════════════════════
  // SOCIAL MEDIA IMPACT
  // ═══════════════════════════════════════════
  wentViral       Boolean          @default(false)
  viralPlatform   String?          // "Twitter", "TikTok"

  estimatedReach  Int?             // Estimated people reached
  hashtagsUsed    String[]         // Related hashtags

  // ═══════════════════════════════════════════
  // CONTROVERSY & DISPUTES
  // ═══════════════════════════════════════════
  isControversial Boolean          @default(false)
  isDisputed      Boolean          @default(false)
  disputeNotes    String?          @db.Text

  // Different narratives
  narrativeDisputes String[]        // Different framings
  primaryNarrative String?
  counterNarrative String?

  // ═══════════════════════════════════════════
  // FLAGS & WARNINGS
  // ═══════════════════════════════════════════
  contentWarning  String?
  isSensitive     Boolean          @default(false)
  isGraphic       Boolean          @default(false)
  requiresContext Boolean          @default(false)

  // ═══════════════════════════════════════════
  // METADATA & TRACKING
  // ═══════════════════════════════════════════
  viewCount       Int              @default(0)
  shareCount      Int              @default(0)

  isFeatured      Boolean          @default(false)
  isPinned        Boolean          @default(false)

  // Editorial
  editorialNotes  String?          @db.Text
  internalNotes   String?          @db.Text

  // Quality
  qualityScore    Float?           // 0-100 for completeness
  lastReviewDate  DateTime?
  reviewedBy      String?

  // Verification (legacy)
  isVerified      Boolean          @default(false)
  verifiedBy      String?
  verifiedAt      DateTime?

  // ═══════════════════════════════════════════
  // METADATA
  // ═══════════════════════════════════════════
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdBy       String?
  lastEditedBy    String?

  // ═══════════════════════════════════════════
  // RELATIONS
  // ═══════════════════════════════════════════
  topics          TopicIncident[]
  statements      Statement[]
  sources         Source[]
  tags            Tag[]            @relation("IncidentTags")
  organizations   Organization[]   @relation("OrganizationIncidents")
  persons         Person[]         @relation("PersonIncidents")
  repercussions   Repercussion[]
  departureAffiliations Affiliation[] @relation("AffiliationDepartureIncident")

  // ═══════════════════════════════════════════
  // INDEXES
  // ═══════════════════════════════════════════
  @@index([incidentDate])
  @@index([status])
  @@index([severity])
  @@index([incidentType, incidentCategory])
  @@index([locationCountry, locationCity])
  @@index([hasRepercussions])
  @@index([isControversial])
  @@index([isFeatured])
  @@index([primaryTopicId])
  @@index([resolutionStatus])
  @@index([slug])
}

model Statement {
  id                  String          @id @default(cuid())
  content             String
  context             String?

  // Type and categorization
  statementType       StatementType   @default(ORIGINAL)
  responseType        ResponseType?   // Only for RESPONSE type

  // Dates
  statementDate       DateTime

  // Medium and verification
  medium              String?         // "twitter", "interview", "speech", etc.
  mediumUrl           String?         // Link to original
  isVerified          Boolean         @default(false)
  verifiedBy          String?
  verifiedAt          DateTime?

  // Impact tracking (for original statements)
  lostEmployment      Boolean         @default(false)
  lostContracts       Boolean         @default(false)
  paintedNegatively   Boolean         @default(false)
  repercussionDetails String?

  // Response-specific (when statementType = RESPONSE)
  responseImpact      String?         // Impact of the response

  // Authors (can be person, org, or both for group statements)
  personId            String?
  person              Person?         @relation("PersonStatements", fields: [personId], references: [id])

  organizationId      String?
  organization        Organization?   @relation("OrganizationStatements", fields: [organizationId], references: [id])

  // Group authorship
  groupAuthors        Person[]        @relation("PersonGroupStatements")
  groupOrganizations  Organization[]  @relation("OrganizationGroupStatements")

  // What this responds to (if RESPONSE type)
  respondsToId        String?
  respondsTo          Statement?      @relation("StatementResponses", fields: [respondsToId], references: [id])
  responses           Statement[]     @relation("StatementResponses")

  // Incident connection
  incidentId          String
  incident            Incident        @relation(fields: [incidentId], references: [id])

  // Timestamps
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  // Primary source
  primarySourceId     String?
  primarySource       Source?         @relation("PrimaryStatementSource", fields: [primarySourceId], references: [id])

  // Relations
  sources             Source[]
  repercussionsCaused Repercussion[]  @relation("TriggeringStatement")
  repercussionsAbout  Repercussion[]  @relation("ResponseStatement")
  tags                Tag[]           @relation("StatementTags")
  triggeredIncident   Incident?       @relation("IncidentTriggeringStatement")

  @@unique([personId, incidentId, content])
  @@index([statementType])
  @@index([personId])
  @@index([organizationId])
  @@index([incidentId])
  @@index([respondsToId])
}

model Repercussion {
  id                    String            @id @default(cuid())

  // Type and classification
  type                  RepercussionType
  description           String

  // Tactical analysis
  isTactical            Boolean           @default(false) // Planned/coordinated vs reactive
  coordinationEvidence  String?           // Evidence of coordination

  // Timing
  startDate             DateTime
  endDate               DateTime?
  duration              Int?              // Days

  // Severity and impact
  severityScore         Int               // 1-100
  impactDescription     String?

  // Affected parties
  affectedPersonId      String?
  affectedPerson        Person?           @relation("PersonRepercussions", fields: [affectedPersonId], references: [id])

  affectedOrgId         String?
  affectedOrganization  Organization?     @relation("OrganizationRepercussions", fields: [affectedOrgId], references: [id])

  // Initiating parties (for tactical operations)
  initiatingOrgs        String[]          // Organization IDs involved
  initiatingPersons     String[]          // Person IDs involved

  // What triggered this
  triggeringStatementId String?
  triggeringStatement   Statement?        @relation("TriggeringStatement", fields: [triggeringStatementId], references: [id])

  // Response statements about this repercussion
  responseStatementId   String?
  responseStatement     Statement?        @relation("ResponseStatement", fields: [responseStatementId], references: [id])

  // Incident connection
  incidentId            String
  incident              Incident          @relation(fields: [incidentId], references: [id])

  // Media coverage
  mediaOutlets          String[]          // MediaOutlet IDs that covered this
  coverageIntensity     String?           // "minimal", "moderate", "intense", "viral"

  // Outcome
  outcome               String?
  isOngoing             Boolean           @default(false)
  wasSuccessful         Boolean?          // Did it achieve intended goal?

  // Verification
  isVerified            Boolean           @default(false)
  verifiedBy            String?
  sources               Source[]

  // Timestamps
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@index([type])
  @@index([isTactical])
  @@index([affectedPersonId])
  @@index([affectedOrgId])
  @@index([incidentId])
}

model Source {
  id              String           @id @default(cuid())

  // ═══════════════════════════════════════════
  // CORE CONTENT
  // ═══════════════════════════════════════════
  title           String
  url             String?
  archiveUrl      String?          // Archive.org or local archive

  // ═══════════════════════════════════════════
  // PUBLICATION INFO (Normalized)
  // ═══════════════════════════════════════════
  mediaOutletId   String?
  mediaOutlet     MediaOutlet?     @relation(fields: [mediaOutletId], references: [id])

  publication     String?          // Legacy field for migration
  publicationSlug String?
  publicationSection String?       // "News", "Opinion", "Editorial"

  // ═══════════════════════════════════════════
  // AUTHORSHIP
  // ═══════════════════════════════════════════
  author          String?
  journalistId    String?          // Link to Journalist if known
  journalist      Journalist?      @relation(fields: [journalistId], references: [id])

  additionalAuthors String[]       // Co-authors

  // ═══════════════════════════════════════════
  // TEMPORAL DATA
  // ═══════════════════════════════════════════
  publishDate     DateTime?
  accessDate      DateTime         @default(now())
  lastVerified    DateTime?
  lastVerifiedDate DateTime?

  // ═══════════════════════════════════════════
  // SOURCE TYPE & CLASSIFICATION
  // ═══════════════════════════════════════════
  sourceType      SourceType?      @default(NEWS_ARTICLE)
  sourceLevel     SourceLevel?     @default(SECONDARY)
  contentType     ContentType?     @default(TEXT)

  // ═══════════════════════════════════════════
  // VERIFICATION & CREDIBILITY
  // ═══════════════════════════════════════════
  credibilityScore Float?          // 0-100 calculated score
  credibility     CredibilityRating @default(UNKNOWN)

  verificationStatus VerificationStatus? @default(UNVERIFIED)
  verificationDate DateTime?
  verifiedBy      String?
  verificationNotes String?         @db.Text

  // Fact-checking
  factCheckStatus FactCheckStatus?
  factCheckUrl    String?
  factCheckBy     String?

  // ═══════════════════════════════════════════
  // ARCHIVAL & PRESERVATION
  // ═══════════════════════════════════════════
  isArchived      Boolean          @default(false)
  archiveDate     DateTime?
  archiveMethod   ArchiveMethod?
  archiveHash     String?          // SHA-256 of archived content

  requiresArchival Boolean         @default(true)
  archivalPriority Int             @default(5) // 1-10

  // Content preservation
  contentSnapshot String?          @db.Text // Text content backup
  screenshotUrl   String?
  pdfUrl          String?

  // ═══════════════════════════════════════════
  // QUALITY METRICS
  // ═══════════════════════════════════════════
  hasPaywall      Boolean          @default(false)
  isOpinion       Boolean          @default(false)
  isEditorial     Boolean          @default(false)
  isExclusive     Boolean          @default(false)

  // Source quality indicators
  hasByline       Boolean          @default(false)
  hasDate         Boolean          @default(false)
  hasSources      Boolean          @default(false)
  hasMultipleSources Boolean       @default(false)
  wordCount       Int?
  qualityScore    Int?             // 1-100

  // Bias indicators
  biasRating      BiasRating?
  biasNote        String?

  // ═══════════════════════════════════════════
  // RELATIONSHIPS
  // ═══════════════════════════════════════════
  incidentId      String?
  incident        Incident?        @relation(fields: [incidentId], references: [id])

  statementId     String?
  statement       Statement?       @relation(fields: [statementId], references: [id])

  repercussionId  String?
  repercussion    Repercussion?    @relation(fields: [repercussionId], references: [id])

  topicId         String?
  topic           Topic?           @relation("TopicSources", fields: [topicId], references: [id])

  // As primary source
  primaryForStatements Statement[]  @relation("PrimaryStatementSource")

  // Related to affiliations
  affiliations    Affiliation[]    @relation("AffiliationSources")

  // ═══════════════════════════════════════════
  // METADATA & FLAGS
  // ═══════════════════════════════════════════
  isDeleted       Boolean          @default(false)
  deletionDate    DateTime?
  deletionReason  String?

  isBroken        Boolean          @default(false) // Link broken
  lastCheckDate   DateTime?
  checkFailCount  Int              @default(0)

  // Content warnings
  contentWarning  String?
  isGraphic       Boolean          @default(false)
  isSensitive     Boolean          @default(false)

  // Usage tracking
  citationCount   Int              @default(0) // Times cited
  viewCount       Int              @default(0)

  // ═══════════════════════════════════════════
  // NOTES
  // ═══════════════════════════════════════════
  publicNotes     String?          @db.Text
  internalNotes   String?          @db.Text

  // ═══════════════════════════════════════════
  // METADATA
  // ═══════════════════════════════════════════
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdBy       String?
  lastEditedBy    String?

  // ═══════════════════════════════════════════
  // INDEXES
  // ═══════════════════════════════════════════
  @@index([mediaOutletId])
  @@index([sourceType, sourceLevel])
  @@index([verificationStatus])
  @@index([publishDate])
  @@index([credibility])
  @@index([isArchived])
  @@index([journalistId])
  @@index([incidentId])
  @@index([statementId])
  @@index([topicId])
}

model Affiliation {
  id               String         @id @default(cuid())

  // ═══════════════════════════════════════════
  // CORE RELATIONSHIP
  // ═══════════════════════════════════════════
  personId         String
  person           Person         @relation(fields: [personId], references: [id])

  organizationId   String
  organization     Organization   @relation(fields: [organizationId], references: [id])

  // ═══════════════════════════════════════════
  // ROLE & POSITION
  // ═══════════════════════════════════════════
  role             String         // "CEO", "Board Member", "Spokesperson"
  roleCategory     RoleCategory?
  roleLevel        RoleLevel?     @default(MID)
  department       String?        // "Editorial", "News", "Opinion"

  // Detailed title
  officialTitle    String?        // Full official title
  shortTitle       String?        // Abbreviated for display
  previousRole     String?        // If promoted/changed within same org

  // ═══════════════════════════════════════════
  // TEMPORAL DATA
  // ═══════════════════════════════════════════
  startDate        DateTime?
  endDate          DateTime?
  isActive         Boolean        @default(true)
  isCurrent        Boolean        @default(true) // Primary current affiliation

  // Tenure tracking
  tenureMonths     Int?           // Calculated or entered
  appointmentType  AppointmentType? // ELECTED, APPOINTED, HIRED
  termLimit        String?        // "2 years", "At pleasure"

  // ═══════════════════════════════════════════
  // AFFILIATION TYPE & NATURE
  // ═══════════════════════════════════════════
  affiliationType  AffiliationType?
  isPrimary        Boolean        @default(false) // Primary affiliation
  isPublic         Boolean        @default(true)  // Publicly known
  isVerified       Boolean        @default(false)

  // Employment details
  employmentStatus EmploymentStatus? // FULL_TIME, PART_TIME, CONTRACT
  isPaid           Boolean?       @default(true)
  isVolunteer      Boolean        @default(false)
  compensationType String?        // "salary", "contract", "per-appearance"

  // ═══════════════════════════════════════════
  // DEPARTURE & CHANGES
  // ═══════════════════════════════════════════
  departureReason  DepartureReason?
  departureNote    String?        @db.Text
  wasTerminated    Boolean        @default(false)
  wasResignation   Boolean        @default(false)

  // If controversial departure
  departureIncidentId String?
  departureIncident   Incident?   @relation("AffiliationDepartureIncident", fields: [departureIncidentId], references: [id])

  // ═══════════════════════════════════════════
  // INFLUENCE & AUTHORITY
  // ═══════════════════════════════════════════
  hasHiringAuthority Boolean      @default(false)
  hasBudgetAuthority Boolean      @default(false)
  hasPublicProfile   Boolean      @default(false)
  hasMediaRole       Boolean      @default(false)

  influenceLevel   Int?           // 1-10 scale
  authorityScope   String?        // "National", "Regional", "Department"

  // ═══════════════════════════════════════════
  // MEDIA & PUBLIC APPEARANCES
  // ═══════════════════════════════════════════
  appearanceType   String?        // "regular", "contributor", "guest", "host"
  frequency        String?        // "daily", "weekly", "monthly", "occasional"
  mediaAppearances Int            @default(0)
  speakingEngagements Int         @default(0)
  publicStatements Int            @default(0)

  isSpokesperson   Boolean        @default(false)
  mediaRestrictions String?       // "Not authorized to speak"

  // ═══════════════════════════════════════════
  // VERIFICATION & SOURCES
  // ═══════════════════════════════════════════
  verificationDate DateTime?
  verifiedBy       String?
  verificationSource String?      // "LinkedIn", "Company website"

  sources          Source[]       @relation("AffiliationSources")
  evidenceUrl      String?        // Link to proof

  // ═══════════════════════════════════════════
  // NOTES & METADATA
  // ═══════════════════════════════════════════
  description      String?        @db.Text // Additional context
  responsibilities String[]
  internalNotes    String?        @db.Text // Private editorial notes
  publicNotes      String?        @db.Text // Public display notes

  // Controversy flags
  isControversial  Boolean        @default(false)
  controversyNote  String?        @db.Text

  // ═══════════════════════════════════════════
  // METADATA
  // ═══════════════════════════════════════════
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  createdBy        String?
  lastEditedBy     String?

  // ═══════════════════════════════════════════
  // INDEXES
  // ═══════════════════════════════════════════
  @@unique([personId, organizationId, role, startDate])
  @@index([personId, isCurrent])
  @@index([organizationId, isActive])
  @@index([roleCategory, roleLevel])
  @@index([startDate, endDate])
  @@index([isVerified])
  @@index([departureReason])
}

model Tag {
  id               String        @id @default(cuid())

  // ═══════════════════════════════════════════
  // CORE IDENTIFICATION
  // ═══════════════════════════════════════════
  name             String        @unique
  slug             String        @unique

  // ═══════════════════════════════════════════
  // CATEGORIZATION & HIERARCHY
  // ═══════════════════════════════════════════
  category         TagCategory   @default(OTHER)
  subcategory      String?

  // Parent-child relationships
  parentTagId      String?
  parentTag        Tag?          @relation("TagHierarchy", fields: [parentTagId], references: [id])
  childTags        Tag[]         @relation("TagHierarchy")

  // ═══════════════════════════════════════════
  // DESCRIPTION & METADATA
  // ═══════════════════════════════════════════
  description      String?       @db.Text
  usageGuidelines  String?       @db.Text

  // Visual elements
  icon             String?       // Emoji or icon identifier
  color            String?       // Hex color
  backgroundColor  String?

  // ═══════════════════════════════════════════
  // CONTROVERSY & NEUTRALITY
  // ═══════════════════════════════════════════
  isControversial  Boolean       @default(false)
  controversyScore Int?          // 1-100
  controversyNote  String?       @db.Text

  disputedBy       String[]      // Groups that dispute
  preferredBy      String[]      // Groups that prefer
  neutralAlternative String?

  // ═══════════════════════════════════════════
  // MODERATION & QUALITY
  // ═══════════════════════════════════════════
  status           TagStatus     @default(PENDING)
  createdBy        String?
  approvedBy       String?
  approvedDate     DateTime?
  rejectionReason  String?

  requiresApproval Boolean       @default(false)
  restrictedTo     String[]      // User roles

  // ═══════════════════════════════════════════
  // RELATIONSHIPS (Multi-entity)
  // ═══════════════════════════════════════════
  incidents        Incident[]    @relation("IncidentTags")
  statements       Statement[]   @relation("StatementTags")
  persons          Person[]      @relation("PersonTags")
  organizations    Organization[] @relation("OrganizationTags")
  topics           Topic[]       @relation("TopicTags")

  // ═══════════════════════════════════════════
  // STATISTICS & METRICS
  // ═══════════════════════════════════════════
  usageCount       Int           @default(0)

  // Cached counts by entity
  incidentCount    Int           @default(0)
  statementCount   Int           @default(0)
  personCount      Int           @default(0)
  orgCount         Int           @default(0)

  // ═══════════════════════════════════════════
  // ALIASES & SYNONYMS
  // ═══════════════════════════════════════════
  aliases          TagAlias[]

  // ═══════════════════════════════════════════
  // TEMPORAL DATA
  // ═══════════════════════════════════════════
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  lastUsedAt       DateTime?
  deprecatedAt     DateTime?

  @@index([category, status])
  @@index([slug])
  @@index([parentTagId])
  @@index([isControversial])
  @@index([usageCount])
}

// ============ JUNCTION TABLES ============

model TopicIncident {
  topicId        String
  topic          Topic                  @relation(fields: [topicId], references: [id])

  incidentId     String
  incident       Incident               @relation(fields: [incidentId], references: [id])

  // Additional fields
  relationType   TopicIncidentRelation  @default(RELATED)
  relevanceScore Int?
  isPrimary      Boolean                @default(false)
  notes          String?
  addedBy        String?
  isVerified     Boolean                @default(false)

  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt

  @@id([topicId, incidentId])
  @@index([topicId])
  @@index([incidentId])
  @@index([relationType])
}

model TopicRelation {
  id             String             @id @default(cuid())

  fromTopicId    String
  fromTopic      Topic              @relation("TopicRelationFrom", fields: [fromTopicId], references: [id], onDelete: Cascade)

  toTopicId      String
  toTopic        Topic              @relation("TopicRelationTo", fields: [toTopicId], references: [id], onDelete: Cascade)

  relationType   TopicRelationType
  description    String?
  strength       Int                @default(5)  // 1-10 scale
  isVerified     Boolean            @default(false)

  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@unique([fromTopicId, toTopicId, relationType])
  @@index([fromTopicId])
  @@index([toTopicId])
  @@index([relationType])
}

// ============ NEW v3.0.1 MODELS ============

// Legacy Event model for migration support
model Event {
  id              String         @id @default(cuid())
  name            String
  slug            String         @unique
  description     String?
  startDate       DateTime?
  endDate         DateTime?

  // Relations
  childIncidents  Incident[]

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([slug])
}

model TagAlias {
  id              String         @id @default(cuid())

  tagId           String
  tag             Tag            @relation(fields: [tagId], references: [id])

  alias           String         @unique
  aliasType       AliasType
  language        String         @default("en")

  createdAt       DateTime       @default(now())

  @@index([alias])
  @@index([tagId])
}